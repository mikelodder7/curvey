package internal

import (
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
)

var bls12381Fq = []uint64{0xffffffff00000001, 0x53bda402fffe5bfe, 0x3339d80809a1d805, 0x73eda753299d7d48}
var bls12381FqBytes = []byte{0x73, 0xed, 0xa7, 0x53, 0x29, 0x9d, 0x7d, 0x48, 0x33, 0x39, 0xd8, 0x08, 0x09, 0xa1, 0xd8, 0x05, 0x53, 0xbd, 0xa4, 0x02, 0xff, 0xfe, 0x5b, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01}

var ed448FpBytes = []byte{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
}

var ed448FqBytes = []byte{
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7c, 0xca, 0x23, 0xe9, 0xc4, 0x4e, 0xdb, 0x49, 0xae, 0xd6, 0x36, 0x90, 0x21, 0x6c, 0xc2, 0x72, 0x8d, 0xc5, 0x8f, 0x55, 0x23, 0x78, 0xc2, 0x92, 0xab, 0x58, 0x44, 0xf3,
}

func TestField_Add(t *testing.T) {
	fq, err := new(FieldParams).newFromBytes(ed448FqBytes)
	require.NoError(t, err)
	require.NotNil(t, fq)

	a := new(Field).Init(fq, fq).SetOne()
	b := new(Field).Init(fq, fq).SetOne()
	c := new(Field).Init(fq, fq).Add(a, b)
	exp := new(Field).Init(fq, fq).SetBigInt(new(big.Int).SetInt64(2))

	require.Equal(t, 1, exp.EqualI(c))

	d, e := new(Field).Init(fq, fq).SetLimbs([]uint64{0x7FFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF, 0xFFFF_FFFF_FFFF_FFFF})
	require.NoError(t, e)
	require.NotNil(t, d)
	d2 := new(Field).Init(fq, fq).Square(d)
	require.NotNil(t, d2)
	sqrtd, wasSquare := d2.SqrtI(d2)
	require.NotNil(t, sqrtd)
	require.Equal(t, wasSquare, 1)

	l, wasInverted := new(Field).Init(fq, fq).InvertI(d)
	require.Equal(t, wasInverted, 1)
	require.NotNil(t, l)
}

func TestField_CSwap(t *testing.T) {
	fp, err := new(FieldParams).newFromBytes(ed448FpBytes)
	require.NoError(t, err)
	one := new(Field).Init(fp, fp).SetOne()
	two := new(Field).Init(fp, fp).Double(one)

	a := new(Field).Init(fp, fp).SetOne()
	b := new(Field).Init(fp, fp).Double(a)

	a.CSwap(b, 1)

	require.True(t, one.Equal(b))
	require.True(t, two.Equal(a))
}
