package fp

// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: fiat_crypto.js word-by-word-montgomery --lang Go --no-wide-int --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name curve448 '' 64 '2^448 - 2^224 -1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat
//
// curve description (via package name): curve448
//
// machine_wordsize = 64 (from "64")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat
//
// m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffff (from "2^448 - 2^224 -1")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) + (z[4] << 256) + (z[5] << 0x140) + (z[6] << 0x180)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8)
//
//   twos_complement_eval z = let x1 := z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192) + (z[4] << 256) + (z[5] << 0x140) + (z[6] << 0x180) in
//
//                            if x1 & (2^448-1) < 2^447 then x1 & (2^448-1) else (x1 & (2^448-1)) - 2^448

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
type MontgomeryDomainFieldElement [7]uint64

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
type NonMontgomeryDomainFieldElement [7]uint64

// cmovznzU64 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffffff]
func cmovznzU64(out1 *uint64, arg1 uint1, arg2 uint64, arg3 uint64) {
	x1 := (uint64(arg1) * 0xffffffffffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint64
	var x9 uint64
	x9, x8 = bits.Mul64(x7, arg2[6])
	var x10 uint64
	var x11 uint64
	x11, x10 = bits.Mul64(x7, arg2[5])
	var x12 uint64
	var x13 uint64
	x13, x12 = bits.Mul64(x7, arg2[4])
	var x14 uint64
	var x15 uint64
	x15, x14 = bits.Mul64(x7, arg2[3])
	var x16 uint64
	var x17 uint64
	x17, x16 = bits.Mul64(x7, arg2[2])
	var x18 uint64
	var x19 uint64
	x19, x18 = bits.Mul64(x7, arg2[1])
	var x20 uint64
	var x21 uint64
	x21, x20 = bits.Mul64(x7, arg2[0])
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x21, x18, uint64(0x0))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x19, x16, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x17, x14, uint64(uint1(x25)))
	var x28 uint64
	var x29 uint64
	x28, x29 = bits.Add64(x15, x12, uint64(uint1(x27)))
	var x30 uint64
	var x31 uint64
	x30, x31 = bits.Add64(x13, x10, uint64(uint1(x29)))
	var x32 uint64
	var x33 uint64
	x32, x33 = bits.Add64(x11, x8, uint64(uint1(x31)))
	x34 := (uint64(uint1(x33)) + x9)
	var x35 uint64
	var x36 uint64
	x36, x35 = bits.Mul64(x20, 0xffffffffffffffff)
	var x37 uint64
	var x38 uint64
	x38, x37 = bits.Mul64(x20, 0xffffffffffffffff)
	var x39 uint64
	var x40 uint64
	x40, x39 = bits.Mul64(x20, 0xffffffffffffffff)
	var x41 uint64
	var x42 uint64
	x42, x41 = bits.Mul64(x20, 0xfffffffeffffffff)
	var x43 uint64
	var x44 uint64
	x44, x43 = bits.Mul64(x20, 0xffffffffffffffff)
	var x45 uint64
	var x46 uint64
	x46, x45 = bits.Mul64(x20, 0xffffffffffffffff)
	var x47 uint64
	var x48 uint64
	x48, x47 = bits.Mul64(x20, 0xffffffffffffffff)
	var x49 uint64
	var x50 uint64
	x49, x50 = bits.Add64(x48, x45, uint64(0x0))
	var x51 uint64
	var x52 uint64
	x51, x52 = bits.Add64(x46, x43, uint64(uint1(x50)))
	var x53 uint64
	var x54 uint64
	x53, x54 = bits.Add64(x44, x41, uint64(uint1(x52)))
	var x55 uint64
	var x56 uint64
	x55, x56 = bits.Add64(x42, x39, uint64(uint1(x54)))
	var x57 uint64
	var x58 uint64
	x57, x58 = bits.Add64(x40, x37, uint64(uint1(x56)))
	var x59 uint64
	var x60 uint64
	x59, x60 = bits.Add64(x38, x35, uint64(uint1(x58)))
	x61 := (uint64(uint1(x60)) + x36)
	var x63 uint64
	_, x63 = bits.Add64(x20, x47, uint64(0x0))
	var x64 uint64
	var x65 uint64
	x64, x65 = bits.Add64(x22, x49, uint64(uint1(x63)))
	var x66 uint64
	var x67 uint64
	x66, x67 = bits.Add64(x24, x51, uint64(uint1(x65)))
	var x68 uint64
	var x69 uint64
	x68, x69 = bits.Add64(x26, x53, uint64(uint1(x67)))
	var x70 uint64
	var x71 uint64
	x70, x71 = bits.Add64(x28, x55, uint64(uint1(x69)))
	var x72 uint64
	var x73 uint64
	x72, x73 = bits.Add64(x30, x57, uint64(uint1(x71)))
	var x74 uint64
	var x75 uint64
	x74, x75 = bits.Add64(x32, x59, uint64(uint1(x73)))
	var x76 uint64
	var x77 uint64
	x76, x77 = bits.Add64(x34, x61, uint64(uint1(x75)))
	var x78 uint64
	var x79 uint64
	x79, x78 = bits.Mul64(x1, arg2[6])
	var x80 uint64
	var x81 uint64
	x81, x80 = bits.Mul64(x1, arg2[5])
	var x82 uint64
	var x83 uint64
	x83, x82 = bits.Mul64(x1, arg2[4])
	var x84 uint64
	var x85 uint64
	x85, x84 = bits.Mul64(x1, arg2[3])
	var x86 uint64
	var x87 uint64
	x87, x86 = bits.Mul64(x1, arg2[2])
	var x88 uint64
	var x89 uint64
	x89, x88 = bits.Mul64(x1, arg2[1])
	var x90 uint64
	var x91 uint64
	x91, x90 = bits.Mul64(x1, arg2[0])
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x91, x88, uint64(0x0))
	var x94 uint64
	var x95 uint64
	x94, x95 = bits.Add64(x89, x86, uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x96, x97 = bits.Add64(x87, x84, uint64(uint1(x95)))
	var x98 uint64
	var x99 uint64
	x98, x99 = bits.Add64(x85, x82, uint64(uint1(x97)))
	var x100 uint64
	var x101 uint64
	x100, x101 = bits.Add64(x83, x80, uint64(uint1(x99)))
	var x102 uint64
	var x103 uint64
	x102, x103 = bits.Add64(x81, x78, uint64(uint1(x101)))
	x104 := (uint64(uint1(x103)) + x79)
	var x105 uint64
	var x106 uint64
	x105, x106 = bits.Add64(x64, x90, uint64(0x0))
	var x107 uint64
	var x108 uint64
	x107, x108 = bits.Add64(x66, x92, uint64(uint1(x106)))
	var x109 uint64
	var x110 uint64
	x109, x110 = bits.Add64(x68, x94, uint64(uint1(x108)))
	var x111 uint64
	var x112 uint64
	x111, x112 = bits.Add64(x70, x96, uint64(uint1(x110)))
	var x113 uint64
	var x114 uint64
	x113, x114 = bits.Add64(x72, x98, uint64(uint1(x112)))
	var x115 uint64
	var x116 uint64
	x115, x116 = bits.Add64(x74, x100, uint64(uint1(x114)))
	var x117 uint64
	var x118 uint64
	x117, x118 = bits.Add64(x76, x102, uint64(uint1(x116)))
	var x119 uint64
	var x120 uint64
	x119, x120 = bits.Add64(uint64(uint1(x77)), x104, uint64(uint1(x118)))
	var x121 uint64
	var x122 uint64
	x122, x121 = bits.Mul64(x105, 0xffffffffffffffff)
	var x123 uint64
	var x124 uint64
	x124, x123 = bits.Mul64(x105, 0xffffffffffffffff)
	var x125 uint64
	var x126 uint64
	x126, x125 = bits.Mul64(x105, 0xffffffffffffffff)
	var x127 uint64
	var x128 uint64
	x128, x127 = bits.Mul64(x105, 0xfffffffeffffffff)
	var x129 uint64
	var x130 uint64
	x130, x129 = bits.Mul64(x105, 0xffffffffffffffff)
	var x131 uint64
	var x132 uint64
	x132, x131 = bits.Mul64(x105, 0xffffffffffffffff)
	var x133 uint64
	var x134 uint64
	x134, x133 = bits.Mul64(x105, 0xffffffffffffffff)
	var x135 uint64
	var x136 uint64
	x135, x136 = bits.Add64(x134, x131, uint64(0x0))
	var x137 uint64
	var x138 uint64
	x137, x138 = bits.Add64(x132, x129, uint64(uint1(x136)))
	var x139 uint64
	var x140 uint64
	x139, x140 = bits.Add64(x130, x127, uint64(uint1(x138)))
	var x141 uint64
	var x142 uint64
	x141, x142 = bits.Add64(x128, x125, uint64(uint1(x140)))
	var x143 uint64
	var x144 uint64
	x143, x144 = bits.Add64(x126, x123, uint64(uint1(x142)))
	var x145 uint64
	var x146 uint64
	x145, x146 = bits.Add64(x124, x121, uint64(uint1(x144)))
	x147 := (uint64(uint1(x146)) + x122)
	var x149 uint64
	_, x149 = bits.Add64(x105, x133, uint64(0x0))
	var x150 uint64
	var x151 uint64
	x150, x151 = bits.Add64(x107, x135, uint64(uint1(x149)))
	var x152 uint64
	var x153 uint64
	x152, x153 = bits.Add64(x109, x137, uint64(uint1(x151)))
	var x154 uint64
	var x155 uint64
	x154, x155 = bits.Add64(x111, x139, uint64(uint1(x153)))
	var x156 uint64
	var x157 uint64
	x156, x157 = bits.Add64(x113, x141, uint64(uint1(x155)))
	var x158 uint64
	var x159 uint64
	x158, x159 = bits.Add64(x115, x143, uint64(uint1(x157)))
	var x160 uint64
	var x161 uint64
	x160, x161 = bits.Add64(x117, x145, uint64(uint1(x159)))
	var x162 uint64
	var x163 uint64
	x162, x163 = bits.Add64(x119, x147, uint64(uint1(x161)))
	x164 := (uint64(uint1(x163)) + uint64(uint1(x120)))
	var x165 uint64
	var x166 uint64
	x166, x165 = bits.Mul64(x2, arg2[6])
	var x167 uint64
	var x168 uint64
	x168, x167 = bits.Mul64(x2, arg2[5])
	var x169 uint64
	var x170 uint64
	x170, x169 = bits.Mul64(x2, arg2[4])
	var x171 uint64
	var x172 uint64
	x172, x171 = bits.Mul64(x2, arg2[3])
	var x173 uint64
	var x174 uint64
	x174, x173 = bits.Mul64(x2, arg2[2])
	var x175 uint64
	var x176 uint64
	x176, x175 = bits.Mul64(x2, arg2[1])
	var x177 uint64
	var x178 uint64
	x178, x177 = bits.Mul64(x2, arg2[0])
	var x179 uint64
	var x180 uint64
	x179, x180 = bits.Add64(x178, x175, uint64(0x0))
	var x181 uint64
	var x182 uint64
	x181, x182 = bits.Add64(x176, x173, uint64(uint1(x180)))
	var x183 uint64
	var x184 uint64
	x183, x184 = bits.Add64(x174, x171, uint64(uint1(x182)))
	var x185 uint64
	var x186 uint64
	x185, x186 = bits.Add64(x172, x169, uint64(uint1(x184)))
	var x187 uint64
	var x188 uint64
	x187, x188 = bits.Add64(x170, x167, uint64(uint1(x186)))
	var x189 uint64
	var x190 uint64
	x189, x190 = bits.Add64(x168, x165, uint64(uint1(x188)))
	x191 := (uint64(uint1(x190)) + x166)
	var x192 uint64
	var x193 uint64
	x192, x193 = bits.Add64(x150, x177, uint64(0x0))
	var x194 uint64
	var x195 uint64
	x194, x195 = bits.Add64(x152, x179, uint64(uint1(x193)))
	var x196 uint64
	var x197 uint64
	x196, x197 = bits.Add64(x154, x181, uint64(uint1(x195)))
	var x198 uint64
	var x199 uint64
	x198, x199 = bits.Add64(x156, x183, uint64(uint1(x197)))
	var x200 uint64
	var x201 uint64
	x200, x201 = bits.Add64(x158, x185, uint64(uint1(x199)))
	var x202 uint64
	var x203 uint64
	x202, x203 = bits.Add64(x160, x187, uint64(uint1(x201)))
	var x204 uint64
	var x205 uint64
	x204, x205 = bits.Add64(x162, x189, uint64(uint1(x203)))
	var x206 uint64
	var x207 uint64
	x206, x207 = bits.Add64(x164, x191, uint64(uint1(x205)))
	var x208 uint64
	var x209 uint64
	x209, x208 = bits.Mul64(x192, 0xffffffffffffffff)
	var x210 uint64
	var x211 uint64
	x211, x210 = bits.Mul64(x192, 0xffffffffffffffff)
	var x212 uint64
	var x213 uint64
	x213, x212 = bits.Mul64(x192, 0xffffffffffffffff)
	var x214 uint64
	var x215 uint64
	x215, x214 = bits.Mul64(x192, 0xfffffffeffffffff)
	var x216 uint64
	var x217 uint64
	x217, x216 = bits.Mul64(x192, 0xffffffffffffffff)
	var x218 uint64
	var x219 uint64
	x219, x218 = bits.Mul64(x192, 0xffffffffffffffff)
	var x220 uint64
	var x221 uint64
	x221, x220 = bits.Mul64(x192, 0xffffffffffffffff)
	var x222 uint64
	var x223 uint64
	x222, x223 = bits.Add64(x221, x218, uint64(0x0))
	var x224 uint64
	var x225 uint64
	x224, x225 = bits.Add64(x219, x216, uint64(uint1(x223)))
	var x226 uint64
	var x227 uint64
	x226, x227 = bits.Add64(x217, x214, uint64(uint1(x225)))
	var x228 uint64
	var x229 uint64
	x228, x229 = bits.Add64(x215, x212, uint64(uint1(x227)))
	var x230 uint64
	var x231 uint64
	x230, x231 = bits.Add64(x213, x210, uint64(uint1(x229)))
	var x232 uint64
	var x233 uint64
	x232, x233 = bits.Add64(x211, x208, uint64(uint1(x231)))
	x234 := (uint64(uint1(x233)) + x209)
	var x236 uint64
	_, x236 = bits.Add64(x192, x220, uint64(0x0))
	var x237 uint64
	var x238 uint64
	x237, x238 = bits.Add64(x194, x222, uint64(uint1(x236)))
	var x239 uint64
	var x240 uint64
	x239, x240 = bits.Add64(x196, x224, uint64(uint1(x238)))
	var x241 uint64
	var x242 uint64
	x241, x242 = bits.Add64(x198, x226, uint64(uint1(x240)))
	var x243 uint64
	var x244 uint64
	x243, x244 = bits.Add64(x200, x228, uint64(uint1(x242)))
	var x245 uint64
	var x246 uint64
	x245, x246 = bits.Add64(x202, x230, uint64(uint1(x244)))
	var x247 uint64
	var x248 uint64
	x247, x248 = bits.Add64(x204, x232, uint64(uint1(x246)))
	var x249 uint64
	var x250 uint64
	x249, x250 = bits.Add64(x206, x234, uint64(uint1(x248)))
	x251 := (uint64(uint1(x250)) + uint64(uint1(x207)))
	var x252 uint64
	var x253 uint64
	x253, x252 = bits.Mul64(x3, arg2[6])
	var x254 uint64
	var x255 uint64
	x255, x254 = bits.Mul64(x3, arg2[5])
	var x256 uint64
	var x257 uint64
	x257, x256 = bits.Mul64(x3, arg2[4])
	var x258 uint64
	var x259 uint64
	x259, x258 = bits.Mul64(x3, arg2[3])
	var x260 uint64
	var x261 uint64
	x261, x260 = bits.Mul64(x3, arg2[2])
	var x262 uint64
	var x263 uint64
	x263, x262 = bits.Mul64(x3, arg2[1])
	var x264 uint64
	var x265 uint64
	x265, x264 = bits.Mul64(x3, arg2[0])
	var x266 uint64
	var x267 uint64
	x266, x267 = bits.Add64(x265, x262, uint64(0x0))
	var x268 uint64
	var x269 uint64
	x268, x269 = bits.Add64(x263, x260, uint64(uint1(x267)))
	var x270 uint64
	var x271 uint64
	x270, x271 = bits.Add64(x261, x258, uint64(uint1(x269)))
	var x272 uint64
	var x273 uint64
	x272, x273 = bits.Add64(x259, x256, uint64(uint1(x271)))
	var x274 uint64
	var x275 uint64
	x274, x275 = bits.Add64(x257, x254, uint64(uint1(x273)))
	var x276 uint64
	var x277 uint64
	x276, x277 = bits.Add64(x255, x252, uint64(uint1(x275)))
	x278 := (uint64(uint1(x277)) + x253)
	var x279 uint64
	var x280 uint64
	x279, x280 = bits.Add64(x237, x264, uint64(0x0))
	var x281 uint64
	var x282 uint64
	x281, x282 = bits.Add64(x239, x266, uint64(uint1(x280)))
	var x283 uint64
	var x284 uint64
	x283, x284 = bits.Add64(x241, x268, uint64(uint1(x282)))
	var x285 uint64
	var x286 uint64
	x285, x286 = bits.Add64(x243, x270, uint64(uint1(x284)))
	var x287 uint64
	var x288 uint64
	x287, x288 = bits.Add64(x245, x272, uint64(uint1(x286)))
	var x289 uint64
	var x290 uint64
	x289, x290 = bits.Add64(x247, x274, uint64(uint1(x288)))
	var x291 uint64
	var x292 uint64
	x291, x292 = bits.Add64(x249, x276, uint64(uint1(x290)))
	var x293 uint64
	var x294 uint64
	x293, x294 = bits.Add64(x251, x278, uint64(uint1(x292)))
	var x295 uint64
	var x296 uint64
	x296, x295 = bits.Mul64(x279, 0xffffffffffffffff)
	var x297 uint64
	var x298 uint64
	x298, x297 = bits.Mul64(x279, 0xffffffffffffffff)
	var x299 uint64
	var x300 uint64
	x300, x299 = bits.Mul64(x279, 0xffffffffffffffff)
	var x301 uint64
	var x302 uint64
	x302, x301 = bits.Mul64(x279, 0xfffffffeffffffff)
	var x303 uint64
	var x304 uint64
	x304, x303 = bits.Mul64(x279, 0xffffffffffffffff)
	var x305 uint64
	var x306 uint64
	x306, x305 = bits.Mul64(x279, 0xffffffffffffffff)
	var x307 uint64
	var x308 uint64
	x308, x307 = bits.Mul64(x279, 0xffffffffffffffff)
	var x309 uint64
	var x310 uint64
	x309, x310 = bits.Add64(x308, x305, uint64(0x0))
	var x311 uint64
	var x312 uint64
	x311, x312 = bits.Add64(x306, x303, uint64(uint1(x310)))
	var x313 uint64
	var x314 uint64
	x313, x314 = bits.Add64(x304, x301, uint64(uint1(x312)))
	var x315 uint64
	var x316 uint64
	x315, x316 = bits.Add64(x302, x299, uint64(uint1(x314)))
	var x317 uint64
	var x318 uint64
	x317, x318 = bits.Add64(x300, x297, uint64(uint1(x316)))
	var x319 uint64
	var x320 uint64
	x319, x320 = bits.Add64(x298, x295, uint64(uint1(x318)))
	x321 := (uint64(uint1(x320)) + x296)
	var x323 uint64
	_, x323 = bits.Add64(x279, x307, uint64(0x0))
	var x324 uint64
	var x325 uint64
	x324, x325 = bits.Add64(x281, x309, uint64(uint1(x323)))
	var x326 uint64
	var x327 uint64
	x326, x327 = bits.Add64(x283, x311, uint64(uint1(x325)))
	var x328 uint64
	var x329 uint64
	x328, x329 = bits.Add64(x285, x313, uint64(uint1(x327)))
	var x330 uint64
	var x331 uint64
	x330, x331 = bits.Add64(x287, x315, uint64(uint1(x329)))
	var x332 uint64
	var x333 uint64
	x332, x333 = bits.Add64(x289, x317, uint64(uint1(x331)))
	var x334 uint64
	var x335 uint64
	x334, x335 = bits.Add64(x291, x319, uint64(uint1(x333)))
	var x336 uint64
	var x337 uint64
	x336, x337 = bits.Add64(x293, x321, uint64(uint1(x335)))
	x338 := (uint64(uint1(x337)) + uint64(uint1(x294)))
	var x339 uint64
	var x340 uint64
	x340, x339 = bits.Mul64(x4, arg2[6])
	var x341 uint64
	var x342 uint64
	x342, x341 = bits.Mul64(x4, arg2[5])
	var x343 uint64
	var x344 uint64
	x344, x343 = bits.Mul64(x4, arg2[4])
	var x345 uint64
	var x346 uint64
	x346, x345 = bits.Mul64(x4, arg2[3])
	var x347 uint64
	var x348 uint64
	x348, x347 = bits.Mul64(x4, arg2[2])
	var x349 uint64
	var x350 uint64
	x350, x349 = bits.Mul64(x4, arg2[1])
	var x351 uint64
	var x352 uint64
	x352, x351 = bits.Mul64(x4, arg2[0])
	var x353 uint64
	var x354 uint64
	x353, x354 = bits.Add64(x352, x349, uint64(0x0))
	var x355 uint64
	var x356 uint64
	x355, x356 = bits.Add64(x350, x347, uint64(uint1(x354)))
	var x357 uint64
	var x358 uint64
	x357, x358 = bits.Add64(x348, x345, uint64(uint1(x356)))
	var x359 uint64
	var x360 uint64
	x359, x360 = bits.Add64(x346, x343, uint64(uint1(x358)))
	var x361 uint64
	var x362 uint64
	x361, x362 = bits.Add64(x344, x341, uint64(uint1(x360)))
	var x363 uint64
	var x364 uint64
	x363, x364 = bits.Add64(x342, x339, uint64(uint1(x362)))
	x365 := (uint64(uint1(x364)) + x340)
	var x366 uint64
	var x367 uint64
	x366, x367 = bits.Add64(x324, x351, uint64(0x0))
	var x368 uint64
	var x369 uint64
	x368, x369 = bits.Add64(x326, x353, uint64(uint1(x367)))
	var x370 uint64
	var x371 uint64
	x370, x371 = bits.Add64(x328, x355, uint64(uint1(x369)))
	var x372 uint64
	var x373 uint64
	x372, x373 = bits.Add64(x330, x357, uint64(uint1(x371)))
	var x374 uint64
	var x375 uint64
	x374, x375 = bits.Add64(x332, x359, uint64(uint1(x373)))
	var x376 uint64
	var x377 uint64
	x376, x377 = bits.Add64(x334, x361, uint64(uint1(x375)))
	var x378 uint64
	var x379 uint64
	x378, x379 = bits.Add64(x336, x363, uint64(uint1(x377)))
	var x380 uint64
	var x381 uint64
	x380, x381 = bits.Add64(x338, x365, uint64(uint1(x379)))
	var x382 uint64
	var x383 uint64
	x383, x382 = bits.Mul64(x366, 0xffffffffffffffff)
	var x384 uint64
	var x385 uint64
	x385, x384 = bits.Mul64(x366, 0xffffffffffffffff)
	var x386 uint64
	var x387 uint64
	x387, x386 = bits.Mul64(x366, 0xffffffffffffffff)
	var x388 uint64
	var x389 uint64
	x389, x388 = bits.Mul64(x366, 0xfffffffeffffffff)
	var x390 uint64
	var x391 uint64
	x391, x390 = bits.Mul64(x366, 0xffffffffffffffff)
	var x392 uint64
	var x393 uint64
	x393, x392 = bits.Mul64(x366, 0xffffffffffffffff)
	var x394 uint64
	var x395 uint64
	x395, x394 = bits.Mul64(x366, 0xffffffffffffffff)
	var x396 uint64
	var x397 uint64
	x396, x397 = bits.Add64(x395, x392, uint64(0x0))
	var x398 uint64
	var x399 uint64
	x398, x399 = bits.Add64(x393, x390, uint64(uint1(x397)))
	var x400 uint64
	var x401 uint64
	x400, x401 = bits.Add64(x391, x388, uint64(uint1(x399)))
	var x402 uint64
	var x403 uint64
	x402, x403 = bits.Add64(x389, x386, uint64(uint1(x401)))
	var x404 uint64
	var x405 uint64
	x404, x405 = bits.Add64(x387, x384, uint64(uint1(x403)))
	var x406 uint64
	var x407 uint64
	x406, x407 = bits.Add64(x385, x382, uint64(uint1(x405)))
	x408 := (uint64(uint1(x407)) + x383)
	var x410 uint64
	_, x410 = bits.Add64(x366, x394, uint64(0x0))
	var x411 uint64
	var x412 uint64
	x411, x412 = bits.Add64(x368, x396, uint64(uint1(x410)))
	var x413 uint64
	var x414 uint64
	x413, x414 = bits.Add64(x370, x398, uint64(uint1(x412)))
	var x415 uint64
	var x416 uint64
	x415, x416 = bits.Add64(x372, x400, uint64(uint1(x414)))
	var x417 uint64
	var x418 uint64
	x417, x418 = bits.Add64(x374, x402, uint64(uint1(x416)))
	var x419 uint64
	var x420 uint64
	x419, x420 = bits.Add64(x376, x404, uint64(uint1(x418)))
	var x421 uint64
	var x422 uint64
	x421, x422 = bits.Add64(x378, x406, uint64(uint1(x420)))
	var x423 uint64
	var x424 uint64
	x423, x424 = bits.Add64(x380, x408, uint64(uint1(x422)))
	x425 := (uint64(uint1(x424)) + uint64(uint1(x381)))
	var x426 uint64
	var x427 uint64
	x427, x426 = bits.Mul64(x5, arg2[6])
	var x428 uint64
	var x429 uint64
	x429, x428 = bits.Mul64(x5, arg2[5])
	var x430 uint64
	var x431 uint64
	x431, x430 = bits.Mul64(x5, arg2[4])
	var x432 uint64
	var x433 uint64
	x433, x432 = bits.Mul64(x5, arg2[3])
	var x434 uint64
	var x435 uint64
	x435, x434 = bits.Mul64(x5, arg2[2])
	var x436 uint64
	var x437 uint64
	x437, x436 = bits.Mul64(x5, arg2[1])
	var x438 uint64
	var x439 uint64
	x439, x438 = bits.Mul64(x5, arg2[0])
	var x440 uint64
	var x441 uint64
	x440, x441 = bits.Add64(x439, x436, uint64(0x0))
	var x442 uint64
	var x443 uint64
	x442, x443 = bits.Add64(x437, x434, uint64(uint1(x441)))
	var x444 uint64
	var x445 uint64
	x444, x445 = bits.Add64(x435, x432, uint64(uint1(x443)))
	var x446 uint64
	var x447 uint64
	x446, x447 = bits.Add64(x433, x430, uint64(uint1(x445)))
	var x448 uint64
	var x449 uint64
	x448, x449 = bits.Add64(x431, x428, uint64(uint1(x447)))
	var x450 uint64
	var x451 uint64
	x450, x451 = bits.Add64(x429, x426, uint64(uint1(x449)))
	x452 := (uint64(uint1(x451)) + x427)
	var x453 uint64
	var x454 uint64
	x453, x454 = bits.Add64(x411, x438, uint64(0x0))
	var x455 uint64
	var x456 uint64
	x455, x456 = bits.Add64(x413, x440, uint64(uint1(x454)))
	var x457 uint64
	var x458 uint64
	x457, x458 = bits.Add64(x415, x442, uint64(uint1(x456)))
	var x459 uint64
	var x460 uint64
	x459, x460 = bits.Add64(x417, x444, uint64(uint1(x458)))
	var x461 uint64
	var x462 uint64
	x461, x462 = bits.Add64(x419, x446, uint64(uint1(x460)))
	var x463 uint64
	var x464 uint64
	x463, x464 = bits.Add64(x421, x448, uint64(uint1(x462)))
	var x465 uint64
	var x466 uint64
	x465, x466 = bits.Add64(x423, x450, uint64(uint1(x464)))
	var x467 uint64
	var x468 uint64
	x467, x468 = bits.Add64(x425, x452, uint64(uint1(x466)))
	var x469 uint64
	var x470 uint64
	x470, x469 = bits.Mul64(x453, 0xffffffffffffffff)
	var x471 uint64
	var x472 uint64
	x472, x471 = bits.Mul64(x453, 0xffffffffffffffff)
	var x473 uint64
	var x474 uint64
	x474, x473 = bits.Mul64(x453, 0xffffffffffffffff)
	var x475 uint64
	var x476 uint64
	x476, x475 = bits.Mul64(x453, 0xfffffffeffffffff)
	var x477 uint64
	var x478 uint64
	x478, x477 = bits.Mul64(x453, 0xffffffffffffffff)
	var x479 uint64
	var x480 uint64
	x480, x479 = bits.Mul64(x453, 0xffffffffffffffff)
	var x481 uint64
	var x482 uint64
	x482, x481 = bits.Mul64(x453, 0xffffffffffffffff)
	var x483 uint64
	var x484 uint64
	x483, x484 = bits.Add64(x482, x479, uint64(0x0))
	var x485 uint64
	var x486 uint64
	x485, x486 = bits.Add64(x480, x477, uint64(uint1(x484)))
	var x487 uint64
	var x488 uint64
	x487, x488 = bits.Add64(x478, x475, uint64(uint1(x486)))
	var x489 uint64
	var x490 uint64
	x489, x490 = bits.Add64(x476, x473, uint64(uint1(x488)))
	var x491 uint64
	var x492 uint64
	x491, x492 = bits.Add64(x474, x471, uint64(uint1(x490)))
	var x493 uint64
	var x494 uint64
	x493, x494 = bits.Add64(x472, x469, uint64(uint1(x492)))
	x495 := (uint64(uint1(x494)) + x470)
	var x497 uint64
	_, x497 = bits.Add64(x453, x481, uint64(0x0))
	var x498 uint64
	var x499 uint64
	x498, x499 = bits.Add64(x455, x483, uint64(uint1(x497)))
	var x500 uint64
	var x501 uint64
	x500, x501 = bits.Add64(x457, x485, uint64(uint1(x499)))
	var x502 uint64
	var x503 uint64
	x502, x503 = bits.Add64(x459, x487, uint64(uint1(x501)))
	var x504 uint64
	var x505 uint64
	x504, x505 = bits.Add64(x461, x489, uint64(uint1(x503)))
	var x506 uint64
	var x507 uint64
	x506, x507 = bits.Add64(x463, x491, uint64(uint1(x505)))
	var x508 uint64
	var x509 uint64
	x508, x509 = bits.Add64(x465, x493, uint64(uint1(x507)))
	var x510 uint64
	var x511 uint64
	x510, x511 = bits.Add64(x467, x495, uint64(uint1(x509)))
	x512 := (uint64(uint1(x511)) + uint64(uint1(x468)))
	var x513 uint64
	var x514 uint64
	x514, x513 = bits.Mul64(x6, arg2[6])
	var x515 uint64
	var x516 uint64
	x516, x515 = bits.Mul64(x6, arg2[5])
	var x517 uint64
	var x518 uint64
	x518, x517 = bits.Mul64(x6, arg2[4])
	var x519 uint64
	var x520 uint64
	x520, x519 = bits.Mul64(x6, arg2[3])
	var x521 uint64
	var x522 uint64
	x522, x521 = bits.Mul64(x6, arg2[2])
	var x523 uint64
	var x524 uint64
	x524, x523 = bits.Mul64(x6, arg2[1])
	var x525 uint64
	var x526 uint64
	x526, x525 = bits.Mul64(x6, arg2[0])
	var x527 uint64
	var x528 uint64
	x527, x528 = bits.Add64(x526, x523, uint64(0x0))
	var x529 uint64
	var x530 uint64
	x529, x530 = bits.Add64(x524, x521, uint64(uint1(x528)))
	var x531 uint64
	var x532 uint64
	x531, x532 = bits.Add64(x522, x519, uint64(uint1(x530)))
	var x533 uint64
	var x534 uint64
	x533, x534 = bits.Add64(x520, x517, uint64(uint1(x532)))
	var x535 uint64
	var x536 uint64
	x535, x536 = bits.Add64(x518, x515, uint64(uint1(x534)))
	var x537 uint64
	var x538 uint64
	x537, x538 = bits.Add64(x516, x513, uint64(uint1(x536)))
	x539 := (uint64(uint1(x538)) + x514)
	var x540 uint64
	var x541 uint64
	x540, x541 = bits.Add64(x498, x525, uint64(0x0))
	var x542 uint64
	var x543 uint64
	x542, x543 = bits.Add64(x500, x527, uint64(uint1(x541)))
	var x544 uint64
	var x545 uint64
	x544, x545 = bits.Add64(x502, x529, uint64(uint1(x543)))
	var x546 uint64
	var x547 uint64
	x546, x547 = bits.Add64(x504, x531, uint64(uint1(x545)))
	var x548 uint64
	var x549 uint64
	x548, x549 = bits.Add64(x506, x533, uint64(uint1(x547)))
	var x550 uint64
	var x551 uint64
	x550, x551 = bits.Add64(x508, x535, uint64(uint1(x549)))
	var x552 uint64
	var x553 uint64
	x552, x553 = bits.Add64(x510, x537, uint64(uint1(x551)))
	var x554 uint64
	var x555 uint64
	x554, x555 = bits.Add64(x512, x539, uint64(uint1(x553)))
	var x556 uint64
	var x557 uint64
	x557, x556 = bits.Mul64(x540, 0xffffffffffffffff)
	var x558 uint64
	var x559 uint64
	x559, x558 = bits.Mul64(x540, 0xffffffffffffffff)
	var x560 uint64
	var x561 uint64
	x561, x560 = bits.Mul64(x540, 0xffffffffffffffff)
	var x562 uint64
	var x563 uint64
	x563, x562 = bits.Mul64(x540, 0xfffffffeffffffff)
	var x564 uint64
	var x565 uint64
	x565, x564 = bits.Mul64(x540, 0xffffffffffffffff)
	var x566 uint64
	var x567 uint64
	x567, x566 = bits.Mul64(x540, 0xffffffffffffffff)
	var x568 uint64
	var x569 uint64
	x569, x568 = bits.Mul64(x540, 0xffffffffffffffff)
	var x570 uint64
	var x571 uint64
	x570, x571 = bits.Add64(x569, x566, uint64(0x0))
	var x572 uint64
	var x573 uint64
	x572, x573 = bits.Add64(x567, x564, uint64(uint1(x571)))
	var x574 uint64
	var x575 uint64
	x574, x575 = bits.Add64(x565, x562, uint64(uint1(x573)))
	var x576 uint64
	var x577 uint64
	x576, x577 = bits.Add64(x563, x560, uint64(uint1(x575)))
	var x578 uint64
	var x579 uint64
	x578, x579 = bits.Add64(x561, x558, uint64(uint1(x577)))
	var x580 uint64
	var x581 uint64
	x580, x581 = bits.Add64(x559, x556, uint64(uint1(x579)))
	x582 := (uint64(uint1(x581)) + x557)
	var x584 uint64
	_, x584 = bits.Add64(x540, x568, uint64(0x0))
	var x585 uint64
	var x586 uint64
	x585, x586 = bits.Add64(x542, x570, uint64(uint1(x584)))
	var x587 uint64
	var x588 uint64
	x587, x588 = bits.Add64(x544, x572, uint64(uint1(x586)))
	var x589 uint64
	var x590 uint64
	x589, x590 = bits.Add64(x546, x574, uint64(uint1(x588)))
	var x591 uint64
	var x592 uint64
	x591, x592 = bits.Add64(x548, x576, uint64(uint1(x590)))
	var x593 uint64
	var x594 uint64
	x593, x594 = bits.Add64(x550, x578, uint64(uint1(x592)))
	var x595 uint64
	var x596 uint64
	x595, x596 = bits.Add64(x552, x580, uint64(uint1(x594)))
	var x597 uint64
	var x598 uint64
	x597, x598 = bits.Add64(x554, x582, uint64(uint1(x596)))
	x599 := (uint64(uint1(x598)) + uint64(uint1(x555)))
	var x600 uint64
	var x601 uint64
	x600, x601 = bits.Sub64(x585, 0xffffffffffffffff, uint64(0x0))
	var x602 uint64
	var x603 uint64
	x602, x603 = bits.Sub64(x587, 0xffffffffffffffff, uint64(uint1(x601)))
	var x604 uint64
	var x605 uint64
	x604, x605 = bits.Sub64(x589, 0xffffffffffffffff, uint64(uint1(x603)))
	var x606 uint64
	var x607 uint64
	x606, x607 = bits.Sub64(x591, 0xfffffffeffffffff, uint64(uint1(x605)))
	var x608 uint64
	var x609 uint64
	x608, x609 = bits.Sub64(x593, 0xffffffffffffffff, uint64(uint1(x607)))
	var x610 uint64
	var x611 uint64
	x610, x611 = bits.Sub64(x595, 0xffffffffffffffff, uint64(uint1(x609)))
	var x612 uint64
	var x613 uint64
	x612, x613 = bits.Sub64(x597, 0xffffffffffffffff, uint64(uint1(x611)))
	var x615 uint64
	_, x615 = bits.Sub64(x599, uint64(0x0), uint64(uint1(x613)))
	var x616 uint64
	cmovznzU64(&x616, uint1(x615), x600, x585)
	var x617 uint64
	cmovznzU64(&x617, uint1(x615), x602, x587)
	var x618 uint64
	cmovznzU64(&x618, uint1(x615), x604, x589)
	var x619 uint64
	cmovznzU64(&x619, uint1(x615), x606, x591)
	var x620 uint64
	cmovznzU64(&x620, uint1(x615), x608, x593)
	var x621 uint64
	cmovznzU64(&x621, uint1(x615), x610, x595)
	var x622 uint64
	cmovznzU64(&x622, uint1(x615), x612, x597)
	out1[0] = x616
	out1[1] = x617
	out1[2] = x618
	out1[3] = x619
	out1[4] = x620
	out1[5] = x621
	out1[6] = x622
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint64
	var x9 uint64
	x9, x8 = bits.Mul64(x7, arg1[6])
	var x10 uint64
	var x11 uint64
	x11, x10 = bits.Mul64(x7, arg1[5])
	var x12 uint64
	var x13 uint64
	x13, x12 = bits.Mul64(x7, arg1[4])
	var x14 uint64
	var x15 uint64
	x15, x14 = bits.Mul64(x7, arg1[3])
	var x16 uint64
	var x17 uint64
	x17, x16 = bits.Mul64(x7, arg1[2])
	var x18 uint64
	var x19 uint64
	x19, x18 = bits.Mul64(x7, arg1[1])
	var x20 uint64
	var x21 uint64
	x21, x20 = bits.Mul64(x7, arg1[0])
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x21, x18, uint64(0x0))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x19, x16, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x17, x14, uint64(uint1(x25)))
	var x28 uint64
	var x29 uint64
	x28, x29 = bits.Add64(x15, x12, uint64(uint1(x27)))
	var x30 uint64
	var x31 uint64
	x30, x31 = bits.Add64(x13, x10, uint64(uint1(x29)))
	var x32 uint64
	var x33 uint64
	x32, x33 = bits.Add64(x11, x8, uint64(uint1(x31)))
	x34 := (uint64(uint1(x33)) + x9)
	var x35 uint64
	var x36 uint64
	x36, x35 = bits.Mul64(x20, 0xffffffffffffffff)
	var x37 uint64
	var x38 uint64
	x38, x37 = bits.Mul64(x20, 0xffffffffffffffff)
	var x39 uint64
	var x40 uint64
	x40, x39 = bits.Mul64(x20, 0xffffffffffffffff)
	var x41 uint64
	var x42 uint64
	x42, x41 = bits.Mul64(x20, 0xfffffffeffffffff)
	var x43 uint64
	var x44 uint64
	x44, x43 = bits.Mul64(x20, 0xffffffffffffffff)
	var x45 uint64
	var x46 uint64
	x46, x45 = bits.Mul64(x20, 0xffffffffffffffff)
	var x47 uint64
	var x48 uint64
	x48, x47 = bits.Mul64(x20, 0xffffffffffffffff)
	var x49 uint64
	var x50 uint64
	x49, x50 = bits.Add64(x48, x45, uint64(0x0))
	var x51 uint64
	var x52 uint64
	x51, x52 = bits.Add64(x46, x43, uint64(uint1(x50)))
	var x53 uint64
	var x54 uint64
	x53, x54 = bits.Add64(x44, x41, uint64(uint1(x52)))
	var x55 uint64
	var x56 uint64
	x55, x56 = bits.Add64(x42, x39, uint64(uint1(x54)))
	var x57 uint64
	var x58 uint64
	x57, x58 = bits.Add64(x40, x37, uint64(uint1(x56)))
	var x59 uint64
	var x60 uint64
	x59, x60 = bits.Add64(x38, x35, uint64(uint1(x58)))
	x61 := (uint64(uint1(x60)) + x36)
	var x63 uint64
	_, x63 = bits.Add64(x20, x47, uint64(0x0))
	var x64 uint64
	var x65 uint64
	x64, x65 = bits.Add64(x22, x49, uint64(uint1(x63)))
	var x66 uint64
	var x67 uint64
	x66, x67 = bits.Add64(x24, x51, uint64(uint1(x65)))
	var x68 uint64
	var x69 uint64
	x68, x69 = bits.Add64(x26, x53, uint64(uint1(x67)))
	var x70 uint64
	var x71 uint64
	x70, x71 = bits.Add64(x28, x55, uint64(uint1(x69)))
	var x72 uint64
	var x73 uint64
	x72, x73 = bits.Add64(x30, x57, uint64(uint1(x71)))
	var x74 uint64
	var x75 uint64
	x74, x75 = bits.Add64(x32, x59, uint64(uint1(x73)))
	var x76 uint64
	var x77 uint64
	x76, x77 = bits.Add64(x34, x61, uint64(uint1(x75)))
	var x78 uint64
	var x79 uint64
	x79, x78 = bits.Mul64(x1, arg1[6])
	var x80 uint64
	var x81 uint64
	x81, x80 = bits.Mul64(x1, arg1[5])
	var x82 uint64
	var x83 uint64
	x83, x82 = bits.Mul64(x1, arg1[4])
	var x84 uint64
	var x85 uint64
	x85, x84 = bits.Mul64(x1, arg1[3])
	var x86 uint64
	var x87 uint64
	x87, x86 = bits.Mul64(x1, arg1[2])
	var x88 uint64
	var x89 uint64
	x89, x88 = bits.Mul64(x1, arg1[1])
	var x90 uint64
	var x91 uint64
	x91, x90 = bits.Mul64(x1, arg1[0])
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x91, x88, uint64(0x0))
	var x94 uint64
	var x95 uint64
	x94, x95 = bits.Add64(x89, x86, uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x96, x97 = bits.Add64(x87, x84, uint64(uint1(x95)))
	var x98 uint64
	var x99 uint64
	x98, x99 = bits.Add64(x85, x82, uint64(uint1(x97)))
	var x100 uint64
	var x101 uint64
	x100, x101 = bits.Add64(x83, x80, uint64(uint1(x99)))
	var x102 uint64
	var x103 uint64
	x102, x103 = bits.Add64(x81, x78, uint64(uint1(x101)))
	x104 := (uint64(uint1(x103)) + x79)
	var x105 uint64
	var x106 uint64
	x105, x106 = bits.Add64(x64, x90, uint64(0x0))
	var x107 uint64
	var x108 uint64
	x107, x108 = bits.Add64(x66, x92, uint64(uint1(x106)))
	var x109 uint64
	var x110 uint64
	x109, x110 = bits.Add64(x68, x94, uint64(uint1(x108)))
	var x111 uint64
	var x112 uint64
	x111, x112 = bits.Add64(x70, x96, uint64(uint1(x110)))
	var x113 uint64
	var x114 uint64
	x113, x114 = bits.Add64(x72, x98, uint64(uint1(x112)))
	var x115 uint64
	var x116 uint64
	x115, x116 = bits.Add64(x74, x100, uint64(uint1(x114)))
	var x117 uint64
	var x118 uint64
	x117, x118 = bits.Add64(x76, x102, uint64(uint1(x116)))
	var x119 uint64
	var x120 uint64
	x119, x120 = bits.Add64(uint64(uint1(x77)), x104, uint64(uint1(x118)))
	var x121 uint64
	var x122 uint64
	x122, x121 = bits.Mul64(x105, 0xffffffffffffffff)
	var x123 uint64
	var x124 uint64
	x124, x123 = bits.Mul64(x105, 0xffffffffffffffff)
	var x125 uint64
	var x126 uint64
	x126, x125 = bits.Mul64(x105, 0xffffffffffffffff)
	var x127 uint64
	var x128 uint64
	x128, x127 = bits.Mul64(x105, 0xfffffffeffffffff)
	var x129 uint64
	var x130 uint64
	x130, x129 = bits.Mul64(x105, 0xffffffffffffffff)
	var x131 uint64
	var x132 uint64
	x132, x131 = bits.Mul64(x105, 0xffffffffffffffff)
	var x133 uint64
	var x134 uint64
	x134, x133 = bits.Mul64(x105, 0xffffffffffffffff)
	var x135 uint64
	var x136 uint64
	x135, x136 = bits.Add64(x134, x131, uint64(0x0))
	var x137 uint64
	var x138 uint64
	x137, x138 = bits.Add64(x132, x129, uint64(uint1(x136)))
	var x139 uint64
	var x140 uint64
	x139, x140 = bits.Add64(x130, x127, uint64(uint1(x138)))
	var x141 uint64
	var x142 uint64
	x141, x142 = bits.Add64(x128, x125, uint64(uint1(x140)))
	var x143 uint64
	var x144 uint64
	x143, x144 = bits.Add64(x126, x123, uint64(uint1(x142)))
	var x145 uint64
	var x146 uint64
	x145, x146 = bits.Add64(x124, x121, uint64(uint1(x144)))
	x147 := (uint64(uint1(x146)) + x122)
	var x149 uint64
	_, x149 = bits.Add64(x105, x133, uint64(0x0))
	var x150 uint64
	var x151 uint64
	x150, x151 = bits.Add64(x107, x135, uint64(uint1(x149)))
	var x152 uint64
	var x153 uint64
	x152, x153 = bits.Add64(x109, x137, uint64(uint1(x151)))
	var x154 uint64
	var x155 uint64
	x154, x155 = bits.Add64(x111, x139, uint64(uint1(x153)))
	var x156 uint64
	var x157 uint64
	x156, x157 = bits.Add64(x113, x141, uint64(uint1(x155)))
	var x158 uint64
	var x159 uint64
	x158, x159 = bits.Add64(x115, x143, uint64(uint1(x157)))
	var x160 uint64
	var x161 uint64
	x160, x161 = bits.Add64(x117, x145, uint64(uint1(x159)))
	var x162 uint64
	var x163 uint64
	x162, x163 = bits.Add64(x119, x147, uint64(uint1(x161)))
	x164 := (uint64(uint1(x163)) + uint64(uint1(x120)))
	var x165 uint64
	var x166 uint64
	x166, x165 = bits.Mul64(x2, arg1[6])
	var x167 uint64
	var x168 uint64
	x168, x167 = bits.Mul64(x2, arg1[5])
	var x169 uint64
	var x170 uint64
	x170, x169 = bits.Mul64(x2, arg1[4])
	var x171 uint64
	var x172 uint64
	x172, x171 = bits.Mul64(x2, arg1[3])
	var x173 uint64
	var x174 uint64
	x174, x173 = bits.Mul64(x2, arg1[2])
	var x175 uint64
	var x176 uint64
	x176, x175 = bits.Mul64(x2, arg1[1])
	var x177 uint64
	var x178 uint64
	x178, x177 = bits.Mul64(x2, arg1[0])
	var x179 uint64
	var x180 uint64
	x179, x180 = bits.Add64(x178, x175, uint64(0x0))
	var x181 uint64
	var x182 uint64
	x181, x182 = bits.Add64(x176, x173, uint64(uint1(x180)))
	var x183 uint64
	var x184 uint64
	x183, x184 = bits.Add64(x174, x171, uint64(uint1(x182)))
	var x185 uint64
	var x186 uint64
	x185, x186 = bits.Add64(x172, x169, uint64(uint1(x184)))
	var x187 uint64
	var x188 uint64
	x187, x188 = bits.Add64(x170, x167, uint64(uint1(x186)))
	var x189 uint64
	var x190 uint64
	x189, x190 = bits.Add64(x168, x165, uint64(uint1(x188)))
	x191 := (uint64(uint1(x190)) + x166)
	var x192 uint64
	var x193 uint64
	x192, x193 = bits.Add64(x150, x177, uint64(0x0))
	var x194 uint64
	var x195 uint64
	x194, x195 = bits.Add64(x152, x179, uint64(uint1(x193)))
	var x196 uint64
	var x197 uint64
	x196, x197 = bits.Add64(x154, x181, uint64(uint1(x195)))
	var x198 uint64
	var x199 uint64
	x198, x199 = bits.Add64(x156, x183, uint64(uint1(x197)))
	var x200 uint64
	var x201 uint64
	x200, x201 = bits.Add64(x158, x185, uint64(uint1(x199)))
	var x202 uint64
	var x203 uint64
	x202, x203 = bits.Add64(x160, x187, uint64(uint1(x201)))
	var x204 uint64
	var x205 uint64
	x204, x205 = bits.Add64(x162, x189, uint64(uint1(x203)))
	var x206 uint64
	var x207 uint64
	x206, x207 = bits.Add64(x164, x191, uint64(uint1(x205)))
	var x208 uint64
	var x209 uint64
	x209, x208 = bits.Mul64(x192, 0xffffffffffffffff)
	var x210 uint64
	var x211 uint64
	x211, x210 = bits.Mul64(x192, 0xffffffffffffffff)
	var x212 uint64
	var x213 uint64
	x213, x212 = bits.Mul64(x192, 0xffffffffffffffff)
	var x214 uint64
	var x215 uint64
	x215, x214 = bits.Mul64(x192, 0xfffffffeffffffff)
	var x216 uint64
	var x217 uint64
	x217, x216 = bits.Mul64(x192, 0xffffffffffffffff)
	var x218 uint64
	var x219 uint64
	x219, x218 = bits.Mul64(x192, 0xffffffffffffffff)
	var x220 uint64
	var x221 uint64
	x221, x220 = bits.Mul64(x192, 0xffffffffffffffff)
	var x222 uint64
	var x223 uint64
	x222, x223 = bits.Add64(x221, x218, uint64(0x0))
	var x224 uint64
	var x225 uint64
	x224, x225 = bits.Add64(x219, x216, uint64(uint1(x223)))
	var x226 uint64
	var x227 uint64
	x226, x227 = bits.Add64(x217, x214, uint64(uint1(x225)))
	var x228 uint64
	var x229 uint64
	x228, x229 = bits.Add64(x215, x212, uint64(uint1(x227)))
	var x230 uint64
	var x231 uint64
	x230, x231 = bits.Add64(x213, x210, uint64(uint1(x229)))
	var x232 uint64
	var x233 uint64
	x232, x233 = bits.Add64(x211, x208, uint64(uint1(x231)))
	x234 := (uint64(uint1(x233)) + x209)
	var x236 uint64
	_, x236 = bits.Add64(x192, x220, uint64(0x0))
	var x237 uint64
	var x238 uint64
	x237, x238 = bits.Add64(x194, x222, uint64(uint1(x236)))
	var x239 uint64
	var x240 uint64
	x239, x240 = bits.Add64(x196, x224, uint64(uint1(x238)))
	var x241 uint64
	var x242 uint64
	x241, x242 = bits.Add64(x198, x226, uint64(uint1(x240)))
	var x243 uint64
	var x244 uint64
	x243, x244 = bits.Add64(x200, x228, uint64(uint1(x242)))
	var x245 uint64
	var x246 uint64
	x245, x246 = bits.Add64(x202, x230, uint64(uint1(x244)))
	var x247 uint64
	var x248 uint64
	x247, x248 = bits.Add64(x204, x232, uint64(uint1(x246)))
	var x249 uint64
	var x250 uint64
	x249, x250 = bits.Add64(x206, x234, uint64(uint1(x248)))
	x251 := (uint64(uint1(x250)) + uint64(uint1(x207)))
	var x252 uint64
	var x253 uint64
	x253, x252 = bits.Mul64(x3, arg1[6])
	var x254 uint64
	var x255 uint64
	x255, x254 = bits.Mul64(x3, arg1[5])
	var x256 uint64
	var x257 uint64
	x257, x256 = bits.Mul64(x3, arg1[4])
	var x258 uint64
	var x259 uint64
	x259, x258 = bits.Mul64(x3, arg1[3])
	var x260 uint64
	var x261 uint64
	x261, x260 = bits.Mul64(x3, arg1[2])
	var x262 uint64
	var x263 uint64
	x263, x262 = bits.Mul64(x3, arg1[1])
	var x264 uint64
	var x265 uint64
	x265, x264 = bits.Mul64(x3, arg1[0])
	var x266 uint64
	var x267 uint64
	x266, x267 = bits.Add64(x265, x262, uint64(0x0))
	var x268 uint64
	var x269 uint64
	x268, x269 = bits.Add64(x263, x260, uint64(uint1(x267)))
	var x270 uint64
	var x271 uint64
	x270, x271 = bits.Add64(x261, x258, uint64(uint1(x269)))
	var x272 uint64
	var x273 uint64
	x272, x273 = bits.Add64(x259, x256, uint64(uint1(x271)))
	var x274 uint64
	var x275 uint64
	x274, x275 = bits.Add64(x257, x254, uint64(uint1(x273)))
	var x276 uint64
	var x277 uint64
	x276, x277 = bits.Add64(x255, x252, uint64(uint1(x275)))
	x278 := (uint64(uint1(x277)) + x253)
	var x279 uint64
	var x280 uint64
	x279, x280 = bits.Add64(x237, x264, uint64(0x0))
	var x281 uint64
	var x282 uint64
	x281, x282 = bits.Add64(x239, x266, uint64(uint1(x280)))
	var x283 uint64
	var x284 uint64
	x283, x284 = bits.Add64(x241, x268, uint64(uint1(x282)))
	var x285 uint64
	var x286 uint64
	x285, x286 = bits.Add64(x243, x270, uint64(uint1(x284)))
	var x287 uint64
	var x288 uint64
	x287, x288 = bits.Add64(x245, x272, uint64(uint1(x286)))
	var x289 uint64
	var x290 uint64
	x289, x290 = bits.Add64(x247, x274, uint64(uint1(x288)))
	var x291 uint64
	var x292 uint64
	x291, x292 = bits.Add64(x249, x276, uint64(uint1(x290)))
	var x293 uint64
	var x294 uint64
	x293, x294 = bits.Add64(x251, x278, uint64(uint1(x292)))
	var x295 uint64
	var x296 uint64
	x296, x295 = bits.Mul64(x279, 0xffffffffffffffff)
	var x297 uint64
	var x298 uint64
	x298, x297 = bits.Mul64(x279, 0xffffffffffffffff)
	var x299 uint64
	var x300 uint64
	x300, x299 = bits.Mul64(x279, 0xffffffffffffffff)
	var x301 uint64
	var x302 uint64
	x302, x301 = bits.Mul64(x279, 0xfffffffeffffffff)
	var x303 uint64
	var x304 uint64
	x304, x303 = bits.Mul64(x279, 0xffffffffffffffff)
	var x305 uint64
	var x306 uint64
	x306, x305 = bits.Mul64(x279, 0xffffffffffffffff)
	var x307 uint64
	var x308 uint64
	x308, x307 = bits.Mul64(x279, 0xffffffffffffffff)
	var x309 uint64
	var x310 uint64
	x309, x310 = bits.Add64(x308, x305, uint64(0x0))
	var x311 uint64
	var x312 uint64
	x311, x312 = bits.Add64(x306, x303, uint64(uint1(x310)))
	var x313 uint64
	var x314 uint64
	x313, x314 = bits.Add64(x304, x301, uint64(uint1(x312)))
	var x315 uint64
	var x316 uint64
	x315, x316 = bits.Add64(x302, x299, uint64(uint1(x314)))
	var x317 uint64
	var x318 uint64
	x317, x318 = bits.Add64(x300, x297, uint64(uint1(x316)))
	var x319 uint64
	var x320 uint64
	x319, x320 = bits.Add64(x298, x295, uint64(uint1(x318)))
	x321 := (uint64(uint1(x320)) + x296)
	var x323 uint64
	_, x323 = bits.Add64(x279, x307, uint64(0x0))
	var x324 uint64
	var x325 uint64
	x324, x325 = bits.Add64(x281, x309, uint64(uint1(x323)))
	var x326 uint64
	var x327 uint64
	x326, x327 = bits.Add64(x283, x311, uint64(uint1(x325)))
	var x328 uint64
	var x329 uint64
	x328, x329 = bits.Add64(x285, x313, uint64(uint1(x327)))
	var x330 uint64
	var x331 uint64
	x330, x331 = bits.Add64(x287, x315, uint64(uint1(x329)))
	var x332 uint64
	var x333 uint64
	x332, x333 = bits.Add64(x289, x317, uint64(uint1(x331)))
	var x334 uint64
	var x335 uint64
	x334, x335 = bits.Add64(x291, x319, uint64(uint1(x333)))
	var x336 uint64
	var x337 uint64
	x336, x337 = bits.Add64(x293, x321, uint64(uint1(x335)))
	x338 := (uint64(uint1(x337)) + uint64(uint1(x294)))
	var x339 uint64
	var x340 uint64
	x340, x339 = bits.Mul64(x4, arg1[6])
	var x341 uint64
	var x342 uint64
	x342, x341 = bits.Mul64(x4, arg1[5])
	var x343 uint64
	var x344 uint64
	x344, x343 = bits.Mul64(x4, arg1[4])
	var x345 uint64
	var x346 uint64
	x346, x345 = bits.Mul64(x4, arg1[3])
	var x347 uint64
	var x348 uint64
	x348, x347 = bits.Mul64(x4, arg1[2])
	var x349 uint64
	var x350 uint64
	x350, x349 = bits.Mul64(x4, arg1[1])
	var x351 uint64
	var x352 uint64
	x352, x351 = bits.Mul64(x4, arg1[0])
	var x353 uint64
	var x354 uint64
	x353, x354 = bits.Add64(x352, x349, uint64(0x0))
	var x355 uint64
	var x356 uint64
	x355, x356 = bits.Add64(x350, x347, uint64(uint1(x354)))
	var x357 uint64
	var x358 uint64
	x357, x358 = bits.Add64(x348, x345, uint64(uint1(x356)))
	var x359 uint64
	var x360 uint64
	x359, x360 = bits.Add64(x346, x343, uint64(uint1(x358)))
	var x361 uint64
	var x362 uint64
	x361, x362 = bits.Add64(x344, x341, uint64(uint1(x360)))
	var x363 uint64
	var x364 uint64
	x363, x364 = bits.Add64(x342, x339, uint64(uint1(x362)))
	x365 := (uint64(uint1(x364)) + x340)
	var x366 uint64
	var x367 uint64
	x366, x367 = bits.Add64(x324, x351, uint64(0x0))
	var x368 uint64
	var x369 uint64
	x368, x369 = bits.Add64(x326, x353, uint64(uint1(x367)))
	var x370 uint64
	var x371 uint64
	x370, x371 = bits.Add64(x328, x355, uint64(uint1(x369)))
	var x372 uint64
	var x373 uint64
	x372, x373 = bits.Add64(x330, x357, uint64(uint1(x371)))
	var x374 uint64
	var x375 uint64
	x374, x375 = bits.Add64(x332, x359, uint64(uint1(x373)))
	var x376 uint64
	var x377 uint64
	x376, x377 = bits.Add64(x334, x361, uint64(uint1(x375)))
	var x378 uint64
	var x379 uint64
	x378, x379 = bits.Add64(x336, x363, uint64(uint1(x377)))
	var x380 uint64
	var x381 uint64
	x380, x381 = bits.Add64(x338, x365, uint64(uint1(x379)))
	var x382 uint64
	var x383 uint64
	x383, x382 = bits.Mul64(x366, 0xffffffffffffffff)
	var x384 uint64
	var x385 uint64
	x385, x384 = bits.Mul64(x366, 0xffffffffffffffff)
	var x386 uint64
	var x387 uint64
	x387, x386 = bits.Mul64(x366, 0xffffffffffffffff)
	var x388 uint64
	var x389 uint64
	x389, x388 = bits.Mul64(x366, 0xfffffffeffffffff)
	var x390 uint64
	var x391 uint64
	x391, x390 = bits.Mul64(x366, 0xffffffffffffffff)
	var x392 uint64
	var x393 uint64
	x393, x392 = bits.Mul64(x366, 0xffffffffffffffff)
	var x394 uint64
	var x395 uint64
	x395, x394 = bits.Mul64(x366, 0xffffffffffffffff)
	var x396 uint64
	var x397 uint64
	x396, x397 = bits.Add64(x395, x392, uint64(0x0))
	var x398 uint64
	var x399 uint64
	x398, x399 = bits.Add64(x393, x390, uint64(uint1(x397)))
	var x400 uint64
	var x401 uint64
	x400, x401 = bits.Add64(x391, x388, uint64(uint1(x399)))
	var x402 uint64
	var x403 uint64
	x402, x403 = bits.Add64(x389, x386, uint64(uint1(x401)))
	var x404 uint64
	var x405 uint64
	x404, x405 = bits.Add64(x387, x384, uint64(uint1(x403)))
	var x406 uint64
	var x407 uint64
	x406, x407 = bits.Add64(x385, x382, uint64(uint1(x405)))
	x408 := (uint64(uint1(x407)) + x383)
	var x410 uint64
	_, x410 = bits.Add64(x366, x394, uint64(0x0))
	var x411 uint64
	var x412 uint64
	x411, x412 = bits.Add64(x368, x396, uint64(uint1(x410)))
	var x413 uint64
	var x414 uint64
	x413, x414 = bits.Add64(x370, x398, uint64(uint1(x412)))
	var x415 uint64
	var x416 uint64
	x415, x416 = bits.Add64(x372, x400, uint64(uint1(x414)))
	var x417 uint64
	var x418 uint64
	x417, x418 = bits.Add64(x374, x402, uint64(uint1(x416)))
	var x419 uint64
	var x420 uint64
	x419, x420 = bits.Add64(x376, x404, uint64(uint1(x418)))
	var x421 uint64
	var x422 uint64
	x421, x422 = bits.Add64(x378, x406, uint64(uint1(x420)))
	var x423 uint64
	var x424 uint64
	x423, x424 = bits.Add64(x380, x408, uint64(uint1(x422)))
	x425 := (uint64(uint1(x424)) + uint64(uint1(x381)))
	var x426 uint64
	var x427 uint64
	x427, x426 = bits.Mul64(x5, arg1[6])
	var x428 uint64
	var x429 uint64
	x429, x428 = bits.Mul64(x5, arg1[5])
	var x430 uint64
	var x431 uint64
	x431, x430 = bits.Mul64(x5, arg1[4])
	var x432 uint64
	var x433 uint64
	x433, x432 = bits.Mul64(x5, arg1[3])
	var x434 uint64
	var x435 uint64
	x435, x434 = bits.Mul64(x5, arg1[2])
	var x436 uint64
	var x437 uint64
	x437, x436 = bits.Mul64(x5, arg1[1])
	var x438 uint64
	var x439 uint64
	x439, x438 = bits.Mul64(x5, arg1[0])
	var x440 uint64
	var x441 uint64
	x440, x441 = bits.Add64(x439, x436, uint64(0x0))
	var x442 uint64
	var x443 uint64
	x442, x443 = bits.Add64(x437, x434, uint64(uint1(x441)))
	var x444 uint64
	var x445 uint64
	x444, x445 = bits.Add64(x435, x432, uint64(uint1(x443)))
	var x446 uint64
	var x447 uint64
	x446, x447 = bits.Add64(x433, x430, uint64(uint1(x445)))
	var x448 uint64
	var x449 uint64
	x448, x449 = bits.Add64(x431, x428, uint64(uint1(x447)))
	var x450 uint64
	var x451 uint64
	x450, x451 = bits.Add64(x429, x426, uint64(uint1(x449)))
	x452 := (uint64(uint1(x451)) + x427)
	var x453 uint64
	var x454 uint64
	x453, x454 = bits.Add64(x411, x438, uint64(0x0))
	var x455 uint64
	var x456 uint64
	x455, x456 = bits.Add64(x413, x440, uint64(uint1(x454)))
	var x457 uint64
	var x458 uint64
	x457, x458 = bits.Add64(x415, x442, uint64(uint1(x456)))
	var x459 uint64
	var x460 uint64
	x459, x460 = bits.Add64(x417, x444, uint64(uint1(x458)))
	var x461 uint64
	var x462 uint64
	x461, x462 = bits.Add64(x419, x446, uint64(uint1(x460)))
	var x463 uint64
	var x464 uint64
	x463, x464 = bits.Add64(x421, x448, uint64(uint1(x462)))
	var x465 uint64
	var x466 uint64
	x465, x466 = bits.Add64(x423, x450, uint64(uint1(x464)))
	var x467 uint64
	var x468 uint64
	x467, x468 = bits.Add64(x425, x452, uint64(uint1(x466)))
	var x469 uint64
	var x470 uint64
	x470, x469 = bits.Mul64(x453, 0xffffffffffffffff)
	var x471 uint64
	var x472 uint64
	x472, x471 = bits.Mul64(x453, 0xffffffffffffffff)
	var x473 uint64
	var x474 uint64
	x474, x473 = bits.Mul64(x453, 0xffffffffffffffff)
	var x475 uint64
	var x476 uint64
	x476, x475 = bits.Mul64(x453, 0xfffffffeffffffff)
	var x477 uint64
	var x478 uint64
	x478, x477 = bits.Mul64(x453, 0xffffffffffffffff)
	var x479 uint64
	var x480 uint64
	x480, x479 = bits.Mul64(x453, 0xffffffffffffffff)
	var x481 uint64
	var x482 uint64
	x482, x481 = bits.Mul64(x453, 0xffffffffffffffff)
	var x483 uint64
	var x484 uint64
	x483, x484 = bits.Add64(x482, x479, uint64(0x0))
	var x485 uint64
	var x486 uint64
	x485, x486 = bits.Add64(x480, x477, uint64(uint1(x484)))
	var x487 uint64
	var x488 uint64
	x487, x488 = bits.Add64(x478, x475, uint64(uint1(x486)))
	var x489 uint64
	var x490 uint64
	x489, x490 = bits.Add64(x476, x473, uint64(uint1(x488)))
	var x491 uint64
	var x492 uint64
	x491, x492 = bits.Add64(x474, x471, uint64(uint1(x490)))
	var x493 uint64
	var x494 uint64
	x493, x494 = bits.Add64(x472, x469, uint64(uint1(x492)))
	x495 := (uint64(uint1(x494)) + x470)
	var x497 uint64
	_, x497 = bits.Add64(x453, x481, uint64(0x0))
	var x498 uint64
	var x499 uint64
	x498, x499 = bits.Add64(x455, x483, uint64(uint1(x497)))
	var x500 uint64
	var x501 uint64
	x500, x501 = bits.Add64(x457, x485, uint64(uint1(x499)))
	var x502 uint64
	var x503 uint64
	x502, x503 = bits.Add64(x459, x487, uint64(uint1(x501)))
	var x504 uint64
	var x505 uint64
	x504, x505 = bits.Add64(x461, x489, uint64(uint1(x503)))
	var x506 uint64
	var x507 uint64
	x506, x507 = bits.Add64(x463, x491, uint64(uint1(x505)))
	var x508 uint64
	var x509 uint64
	x508, x509 = bits.Add64(x465, x493, uint64(uint1(x507)))
	var x510 uint64
	var x511 uint64
	x510, x511 = bits.Add64(x467, x495, uint64(uint1(x509)))
	x512 := (uint64(uint1(x511)) + uint64(uint1(x468)))
	var x513 uint64
	var x514 uint64
	x514, x513 = bits.Mul64(x6, arg1[6])
	var x515 uint64
	var x516 uint64
	x516, x515 = bits.Mul64(x6, arg1[5])
	var x517 uint64
	var x518 uint64
	x518, x517 = bits.Mul64(x6, arg1[4])
	var x519 uint64
	var x520 uint64
	x520, x519 = bits.Mul64(x6, arg1[3])
	var x521 uint64
	var x522 uint64
	x522, x521 = bits.Mul64(x6, arg1[2])
	var x523 uint64
	var x524 uint64
	x524, x523 = bits.Mul64(x6, arg1[1])
	var x525 uint64
	var x526 uint64
	x526, x525 = bits.Mul64(x6, arg1[0])
	var x527 uint64
	var x528 uint64
	x527, x528 = bits.Add64(x526, x523, uint64(0x0))
	var x529 uint64
	var x530 uint64
	x529, x530 = bits.Add64(x524, x521, uint64(uint1(x528)))
	var x531 uint64
	var x532 uint64
	x531, x532 = bits.Add64(x522, x519, uint64(uint1(x530)))
	var x533 uint64
	var x534 uint64
	x533, x534 = bits.Add64(x520, x517, uint64(uint1(x532)))
	var x535 uint64
	var x536 uint64
	x535, x536 = bits.Add64(x518, x515, uint64(uint1(x534)))
	var x537 uint64
	var x538 uint64
	x537, x538 = bits.Add64(x516, x513, uint64(uint1(x536)))
	x539 := (uint64(uint1(x538)) + x514)
	var x540 uint64
	var x541 uint64
	x540, x541 = bits.Add64(x498, x525, uint64(0x0))
	var x542 uint64
	var x543 uint64
	x542, x543 = bits.Add64(x500, x527, uint64(uint1(x541)))
	var x544 uint64
	var x545 uint64
	x544, x545 = bits.Add64(x502, x529, uint64(uint1(x543)))
	var x546 uint64
	var x547 uint64
	x546, x547 = bits.Add64(x504, x531, uint64(uint1(x545)))
	var x548 uint64
	var x549 uint64
	x548, x549 = bits.Add64(x506, x533, uint64(uint1(x547)))
	var x550 uint64
	var x551 uint64
	x550, x551 = bits.Add64(x508, x535, uint64(uint1(x549)))
	var x552 uint64
	var x553 uint64
	x552, x553 = bits.Add64(x510, x537, uint64(uint1(x551)))
	var x554 uint64
	var x555 uint64
	x554, x555 = bits.Add64(x512, x539, uint64(uint1(x553)))
	var x556 uint64
	var x557 uint64
	x557, x556 = bits.Mul64(x540, 0xffffffffffffffff)
	var x558 uint64
	var x559 uint64
	x559, x558 = bits.Mul64(x540, 0xffffffffffffffff)
	var x560 uint64
	var x561 uint64
	x561, x560 = bits.Mul64(x540, 0xffffffffffffffff)
	var x562 uint64
	var x563 uint64
	x563, x562 = bits.Mul64(x540, 0xfffffffeffffffff)
	var x564 uint64
	var x565 uint64
	x565, x564 = bits.Mul64(x540, 0xffffffffffffffff)
	var x566 uint64
	var x567 uint64
	x567, x566 = bits.Mul64(x540, 0xffffffffffffffff)
	var x568 uint64
	var x569 uint64
	x569, x568 = bits.Mul64(x540, 0xffffffffffffffff)
	var x570 uint64
	var x571 uint64
	x570, x571 = bits.Add64(x569, x566, uint64(0x0))
	var x572 uint64
	var x573 uint64
	x572, x573 = bits.Add64(x567, x564, uint64(uint1(x571)))
	var x574 uint64
	var x575 uint64
	x574, x575 = bits.Add64(x565, x562, uint64(uint1(x573)))
	var x576 uint64
	var x577 uint64
	x576, x577 = bits.Add64(x563, x560, uint64(uint1(x575)))
	var x578 uint64
	var x579 uint64
	x578, x579 = bits.Add64(x561, x558, uint64(uint1(x577)))
	var x580 uint64
	var x581 uint64
	x580, x581 = bits.Add64(x559, x556, uint64(uint1(x579)))
	x582 := (uint64(uint1(x581)) + x557)
	var x584 uint64
	_, x584 = bits.Add64(x540, x568, uint64(0x0))
	var x585 uint64
	var x586 uint64
	x585, x586 = bits.Add64(x542, x570, uint64(uint1(x584)))
	var x587 uint64
	var x588 uint64
	x587, x588 = bits.Add64(x544, x572, uint64(uint1(x586)))
	var x589 uint64
	var x590 uint64
	x589, x590 = bits.Add64(x546, x574, uint64(uint1(x588)))
	var x591 uint64
	var x592 uint64
	x591, x592 = bits.Add64(x548, x576, uint64(uint1(x590)))
	var x593 uint64
	var x594 uint64
	x593, x594 = bits.Add64(x550, x578, uint64(uint1(x592)))
	var x595 uint64
	var x596 uint64
	x595, x596 = bits.Add64(x552, x580, uint64(uint1(x594)))
	var x597 uint64
	var x598 uint64
	x597, x598 = bits.Add64(x554, x582, uint64(uint1(x596)))
	x599 := (uint64(uint1(x598)) + uint64(uint1(x555)))
	var x600 uint64
	var x601 uint64
	x600, x601 = bits.Sub64(x585, 0xffffffffffffffff, uint64(0x0))
	var x602 uint64
	var x603 uint64
	x602, x603 = bits.Sub64(x587, 0xffffffffffffffff, uint64(uint1(x601)))
	var x604 uint64
	var x605 uint64
	x604, x605 = bits.Sub64(x589, 0xffffffffffffffff, uint64(uint1(x603)))
	var x606 uint64
	var x607 uint64
	x606, x607 = bits.Sub64(x591, 0xfffffffeffffffff, uint64(uint1(x605)))
	var x608 uint64
	var x609 uint64
	x608, x609 = bits.Sub64(x593, 0xffffffffffffffff, uint64(uint1(x607)))
	var x610 uint64
	var x611 uint64
	x610, x611 = bits.Sub64(x595, 0xffffffffffffffff, uint64(uint1(x609)))
	var x612 uint64
	var x613 uint64
	x612, x613 = bits.Sub64(x597, 0xffffffffffffffff, uint64(uint1(x611)))
	var x615 uint64
	_, x615 = bits.Sub64(x599, uint64(0x0), uint64(uint1(x613)))
	var x616 uint64
	cmovznzU64(&x616, uint1(x615), x600, x585)
	var x617 uint64
	cmovznzU64(&x617, uint1(x615), x602, x587)
	var x618 uint64
	cmovznzU64(&x618, uint1(x615), x604, x589)
	var x619 uint64
	cmovznzU64(&x619, uint1(x615), x606, x591)
	var x620 uint64
	cmovznzU64(&x620, uint1(x615), x608, x593)
	var x621 uint64
	cmovznzU64(&x621, uint1(x615), x610, x595)
	var x622 uint64
	cmovznzU64(&x622, uint1(x615), x612, x597)
	out1[0] = x616
	out1[1] = x617
	out1[2] = x618
	out1[3] = x619
	out1[4] = x620
	out1[5] = x621
	out1[6] = x622
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint64
	var x2 uint64
	x1, x2 = bits.Add64(arg1[0], arg2[0], uint64(0x0))
	var x3 uint64
	var x4 uint64
	x3, x4 = bits.Add64(arg1[1], arg2[1], uint64(uint1(x2)))
	var x5 uint64
	var x6 uint64
	x5, x6 = bits.Add64(arg1[2], arg2[2], uint64(uint1(x4)))
	var x7 uint64
	var x8 uint64
	x7, x8 = bits.Add64(arg1[3], arg2[3], uint64(uint1(x6)))
	var x9 uint64
	var x10 uint64
	x9, x10 = bits.Add64(arg1[4], arg2[4], uint64(uint1(x8)))
	var x11 uint64
	var x12 uint64
	x11, x12 = bits.Add64(arg1[5], arg2[5], uint64(uint1(x10)))
	var x13 uint64
	var x14 uint64
	x13, x14 = bits.Add64(arg1[6], arg2[6], uint64(uint1(x12)))
	var x15 uint64
	var x16 uint64
	x15, x16 = bits.Sub64(x1, 0xffffffffffffffff, uint64(0x0))
	var x17 uint64
	var x18 uint64
	x17, x18 = bits.Sub64(x3, 0xffffffffffffffff, uint64(uint1(x16)))
	var x19 uint64
	var x20 uint64
	x19, x20 = bits.Sub64(x5, 0xffffffffffffffff, uint64(uint1(x18)))
	var x21 uint64
	var x22 uint64
	x21, x22 = bits.Sub64(x7, 0xfffffffeffffffff, uint64(uint1(x20)))
	var x23 uint64
	var x24 uint64
	x23, x24 = bits.Sub64(x9, 0xffffffffffffffff, uint64(uint1(x22)))
	var x25 uint64
	var x26 uint64
	x25, x26 = bits.Sub64(x11, 0xffffffffffffffff, uint64(uint1(x24)))
	var x27 uint64
	var x28 uint64
	x27, x28 = bits.Sub64(x13, 0xffffffffffffffff, uint64(uint1(x26)))
	var x30 uint64
	_, x30 = bits.Sub64(uint64(uint1(x14)), uint64(0x0), uint64(uint1(x28)))
	var x31 uint64
	cmovznzU64(&x31, uint1(x30), x15, x1)
	var x32 uint64
	cmovznzU64(&x32, uint1(x30), x17, x3)
	var x33 uint64
	cmovznzU64(&x33, uint1(x30), x19, x5)
	var x34 uint64
	cmovznzU64(&x34, uint1(x30), x21, x7)
	var x35 uint64
	cmovznzU64(&x35, uint1(x30), x23, x9)
	var x36 uint64
	cmovznzU64(&x36, uint1(x30), x25, x11)
	var x37 uint64
	cmovznzU64(&x37, uint1(x30), x27, x13)
	out1[0] = x31
	out1[1] = x32
	out1[2] = x33
	out1[3] = x34
	out1[4] = x35
	out1[5] = x36
	out1[6] = x37
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint64
	var x2 uint64
	x1, x2 = bits.Sub64(arg1[0], arg2[0], uint64(0x0))
	var x3 uint64
	var x4 uint64
	x3, x4 = bits.Sub64(arg1[1], arg2[1], uint64(uint1(x2)))
	var x5 uint64
	var x6 uint64
	x5, x6 = bits.Sub64(arg1[2], arg2[2], uint64(uint1(x4)))
	var x7 uint64
	var x8 uint64
	x7, x8 = bits.Sub64(arg1[3], arg2[3], uint64(uint1(x6)))
	var x9 uint64
	var x10 uint64
	x9, x10 = bits.Sub64(arg1[4], arg2[4], uint64(uint1(x8)))
	var x11 uint64
	var x12 uint64
	x11, x12 = bits.Sub64(arg1[5], arg2[5], uint64(uint1(x10)))
	var x13 uint64
	var x14 uint64
	x13, x14 = bits.Sub64(arg1[6], arg2[6], uint64(uint1(x12)))
	var x15 uint64
	cmovznzU64(&x15, uint1(x14), uint64(0x0), 0xffffffffffffffff)
	var x16 uint64
	var x17 uint64
	x16, x17 = bits.Add64(x1, x15, uint64(0x0))
	var x18 uint64
	var x19 uint64
	x18, x19 = bits.Add64(x3, x15, uint64(uint1(x17)))
	var x20 uint64
	var x21 uint64
	x20, x21 = bits.Add64(x5, x15, uint64(uint1(x19)))
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x7, (x15 & 0xfffffffeffffffff), uint64(uint1(x21)))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x9, x15, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x11, x15, uint64(uint1(x25)))
	var x28 uint64
	x28, _ = bits.Add64(x13, x15, uint64(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint64
	var x2 uint64
	x1, x2 = bits.Sub64(uint64(0x0), arg1[0], uint64(0x0))
	var x3 uint64
	var x4 uint64
	x3, x4 = bits.Sub64(uint64(0x0), arg1[1], uint64(uint1(x2)))
	var x5 uint64
	var x6 uint64
	x5, x6 = bits.Sub64(uint64(0x0), arg1[2], uint64(uint1(x4)))
	var x7 uint64
	var x8 uint64
	x7, x8 = bits.Sub64(uint64(0x0), arg1[3], uint64(uint1(x6)))
	var x9 uint64
	var x10 uint64
	x9, x10 = bits.Sub64(uint64(0x0), arg1[4], uint64(uint1(x8)))
	var x11 uint64
	var x12 uint64
	x11, x12 = bits.Sub64(uint64(0x0), arg1[5], uint64(uint1(x10)))
	var x13 uint64
	var x14 uint64
	x13, x14 = bits.Sub64(uint64(0x0), arg1[6], uint64(uint1(x12)))
	var x15 uint64
	cmovznzU64(&x15, uint1(x14), uint64(0x0), 0xffffffffffffffff)
	var x16 uint64
	var x17 uint64
	x16, x17 = bits.Add64(x1, x15, uint64(0x0))
	var x18 uint64
	var x19 uint64
	x18, x19 = bits.Add64(x3, x15, uint64(uint1(x17)))
	var x20 uint64
	var x21 uint64
	x20, x21 = bits.Add64(x5, x15, uint64(uint1(x19)))
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x7, (x15 & 0xfffffffeffffffff), uint64(uint1(x21)))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x9, x15, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x11, x15, uint64(uint1(x25)))
	var x28 uint64
	x28, _ = bits.Add64(x13, x15, uint64(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^7) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint64
	var x3 uint64
	x3, x2 = bits.Mul64(x1, 0xffffffffffffffff)
	var x4 uint64
	var x5 uint64
	x5, x4 = bits.Mul64(x1, 0xffffffffffffffff)
	var x6 uint64
	var x7 uint64
	x7, x6 = bits.Mul64(x1, 0xffffffffffffffff)
	var x8 uint64
	var x9 uint64
	x9, x8 = bits.Mul64(x1, 0xfffffffeffffffff)
	var x10 uint64
	var x11 uint64
	x11, x10 = bits.Mul64(x1, 0xffffffffffffffff)
	var x12 uint64
	var x13 uint64
	x13, x12 = bits.Mul64(x1, 0xffffffffffffffff)
	var x14 uint64
	var x15 uint64
	x15, x14 = bits.Mul64(x1, 0xffffffffffffffff)
	var x16 uint64
	var x17 uint64
	x16, x17 = bits.Add64(x15, x12, uint64(0x0))
	var x18 uint64
	var x19 uint64
	x18, x19 = bits.Add64(x13, x10, uint64(uint1(x17)))
	var x20 uint64
	var x21 uint64
	x20, x21 = bits.Add64(x11, x8, uint64(uint1(x19)))
	var x22 uint64
	var x23 uint64
	x22, x23 = bits.Add64(x9, x6, uint64(uint1(x21)))
	var x24 uint64
	var x25 uint64
	x24, x25 = bits.Add64(x7, x4, uint64(uint1(x23)))
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x5, x2, uint64(uint1(x25)))
	var x29 uint64
	_, x29 = bits.Add64(x1, x14, uint64(0x0))
	var x30 uint64
	var x31 uint64
	x30, x31 = bits.Add64(uint64(0x0), x16, uint64(uint1(x29)))
	var x32 uint64
	var x33 uint64
	x32, x33 = bits.Add64(uint64(0x0), x18, uint64(uint1(x31)))
	var x34 uint64
	var x35 uint64
	x34, x35 = bits.Add64(uint64(0x0), x20, uint64(uint1(x33)))
	var x36 uint64
	var x37 uint64
	x36, x37 = bits.Add64(uint64(0x0), x22, uint64(uint1(x35)))
	var x38 uint64
	var x39 uint64
	x38, x39 = bits.Add64(uint64(0x0), x24, uint64(uint1(x37)))
	var x40 uint64
	var x41 uint64
	x40, x41 = bits.Add64(uint64(0x0), x26, uint64(uint1(x39)))
	var x42 uint64
	var x43 uint64
	x42, x43 = bits.Add64(uint64(0x0), (uint64(uint1(x27)) + x3), uint64(uint1(x41)))
	var x44 uint64
	var x45 uint64
	x44, x45 = bits.Add64(x30, arg1[1], uint64(0x0))
	var x46 uint64
	var x47 uint64
	x46, x47 = bits.Add64(x32, uint64(0x0), uint64(uint1(x45)))
	var x48 uint64
	var x49 uint64
	x48, x49 = bits.Add64(x34, uint64(0x0), uint64(uint1(x47)))
	var x50 uint64
	var x51 uint64
	x50, x51 = bits.Add64(x36, uint64(0x0), uint64(uint1(x49)))
	var x52 uint64
	var x53 uint64
	x52, x53 = bits.Add64(x38, uint64(0x0), uint64(uint1(x51)))
	var x54 uint64
	var x55 uint64
	x54, x55 = bits.Add64(x40, uint64(0x0), uint64(uint1(x53)))
	var x56 uint64
	var x57 uint64
	x56, x57 = bits.Add64(x42, uint64(0x0), uint64(uint1(x55)))
	var x58 uint64
	var x59 uint64
	x59, x58 = bits.Mul64(x44, 0xffffffffffffffff)
	var x60 uint64
	var x61 uint64
	x61, x60 = bits.Mul64(x44, 0xffffffffffffffff)
	var x62 uint64
	var x63 uint64
	x63, x62 = bits.Mul64(x44, 0xffffffffffffffff)
	var x64 uint64
	var x65 uint64
	x65, x64 = bits.Mul64(x44, 0xfffffffeffffffff)
	var x66 uint64
	var x67 uint64
	x67, x66 = bits.Mul64(x44, 0xffffffffffffffff)
	var x68 uint64
	var x69 uint64
	x69, x68 = bits.Mul64(x44, 0xffffffffffffffff)
	var x70 uint64
	var x71 uint64
	x71, x70 = bits.Mul64(x44, 0xffffffffffffffff)
	var x72 uint64
	var x73 uint64
	x72, x73 = bits.Add64(x71, x68, uint64(0x0))
	var x74 uint64
	var x75 uint64
	x74, x75 = bits.Add64(x69, x66, uint64(uint1(x73)))
	var x76 uint64
	var x77 uint64
	x76, x77 = bits.Add64(x67, x64, uint64(uint1(x75)))
	var x78 uint64
	var x79 uint64
	x78, x79 = bits.Add64(x65, x62, uint64(uint1(x77)))
	var x80 uint64
	var x81 uint64
	x80, x81 = bits.Add64(x63, x60, uint64(uint1(x79)))
	var x82 uint64
	var x83 uint64
	x82, x83 = bits.Add64(x61, x58, uint64(uint1(x81)))
	var x85 uint64
	_, x85 = bits.Add64(x44, x70, uint64(0x0))
	var x86 uint64
	var x87 uint64
	x86, x87 = bits.Add64(x46, x72, uint64(uint1(x85)))
	var x88 uint64
	var x89 uint64
	x88, x89 = bits.Add64(x48, x74, uint64(uint1(x87)))
	var x90 uint64
	var x91 uint64
	x90, x91 = bits.Add64(x50, x76, uint64(uint1(x89)))
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x52, x78, uint64(uint1(x91)))
	var x94 uint64
	var x95 uint64
	x94, x95 = bits.Add64(x54, x80, uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x96, x97 = bits.Add64(x56, x82, uint64(uint1(x95)))
	var x98 uint64
	var x99 uint64
	x98, x99 = bits.Add64((uint64(uint1(x57)) + uint64(uint1(x43))), (uint64(uint1(x83)) + x59), uint64(uint1(x97)))
	var x100 uint64
	var x101 uint64
	x100, x101 = bits.Add64(x86, arg1[2], uint64(0x0))
	var x102 uint64
	var x103 uint64
	x102, x103 = bits.Add64(x88, uint64(0x0), uint64(uint1(x101)))
	var x104 uint64
	var x105 uint64
	x104, x105 = bits.Add64(x90, uint64(0x0), uint64(uint1(x103)))
	var x106 uint64
	var x107 uint64
	x106, x107 = bits.Add64(x92, uint64(0x0), uint64(uint1(x105)))
	var x108 uint64
	var x109 uint64
	x108, x109 = bits.Add64(x94, uint64(0x0), uint64(uint1(x107)))
	var x110 uint64
	var x111 uint64
	x110, x111 = bits.Add64(x96, uint64(0x0), uint64(uint1(x109)))
	var x112 uint64
	var x113 uint64
	x112, x113 = bits.Add64(x98, uint64(0x0), uint64(uint1(x111)))
	var x114 uint64
	var x115 uint64
	x115, x114 = bits.Mul64(x100, 0xffffffffffffffff)
	var x116 uint64
	var x117 uint64
	x117, x116 = bits.Mul64(x100, 0xffffffffffffffff)
	var x118 uint64
	var x119 uint64
	x119, x118 = bits.Mul64(x100, 0xffffffffffffffff)
	var x120 uint64
	var x121 uint64
	x121, x120 = bits.Mul64(x100, 0xfffffffeffffffff)
	var x122 uint64
	var x123 uint64
	x123, x122 = bits.Mul64(x100, 0xffffffffffffffff)
	var x124 uint64
	var x125 uint64
	x125, x124 = bits.Mul64(x100, 0xffffffffffffffff)
	var x126 uint64
	var x127 uint64
	x127, x126 = bits.Mul64(x100, 0xffffffffffffffff)
	var x128 uint64
	var x129 uint64
	x128, x129 = bits.Add64(x127, x124, uint64(0x0))
	var x130 uint64
	var x131 uint64
	x130, x131 = bits.Add64(x125, x122, uint64(uint1(x129)))
	var x132 uint64
	var x133 uint64
	x132, x133 = bits.Add64(x123, x120, uint64(uint1(x131)))
	var x134 uint64
	var x135 uint64
	x134, x135 = bits.Add64(x121, x118, uint64(uint1(x133)))
	var x136 uint64
	var x137 uint64
	x136, x137 = bits.Add64(x119, x116, uint64(uint1(x135)))
	var x138 uint64
	var x139 uint64
	x138, x139 = bits.Add64(x117, x114, uint64(uint1(x137)))
	var x141 uint64
	_, x141 = bits.Add64(x100, x126, uint64(0x0))
	var x142 uint64
	var x143 uint64
	x142, x143 = bits.Add64(x102, x128, uint64(uint1(x141)))
	var x144 uint64
	var x145 uint64
	x144, x145 = bits.Add64(x104, x130, uint64(uint1(x143)))
	var x146 uint64
	var x147 uint64
	x146, x147 = bits.Add64(x106, x132, uint64(uint1(x145)))
	var x148 uint64
	var x149 uint64
	x148, x149 = bits.Add64(x108, x134, uint64(uint1(x147)))
	var x150 uint64
	var x151 uint64
	x150, x151 = bits.Add64(x110, x136, uint64(uint1(x149)))
	var x152 uint64
	var x153 uint64
	x152, x153 = bits.Add64(x112, x138, uint64(uint1(x151)))
	var x154 uint64
	var x155 uint64
	x154, x155 = bits.Add64((uint64(uint1(x113)) + uint64(uint1(x99))), (uint64(uint1(x139)) + x115), uint64(uint1(x153)))
	var x156 uint64
	var x157 uint64
	x156, x157 = bits.Add64(x142, arg1[3], uint64(0x0))
	var x158 uint64
	var x159 uint64
	x158, x159 = bits.Add64(x144, uint64(0x0), uint64(uint1(x157)))
	var x160 uint64
	var x161 uint64
	x160, x161 = bits.Add64(x146, uint64(0x0), uint64(uint1(x159)))
	var x162 uint64
	var x163 uint64
	x162, x163 = bits.Add64(x148, uint64(0x0), uint64(uint1(x161)))
	var x164 uint64
	var x165 uint64
	x164, x165 = bits.Add64(x150, uint64(0x0), uint64(uint1(x163)))
	var x166 uint64
	var x167 uint64
	x166, x167 = bits.Add64(x152, uint64(0x0), uint64(uint1(x165)))
	var x168 uint64
	var x169 uint64
	x168, x169 = bits.Add64(x154, uint64(0x0), uint64(uint1(x167)))
	var x170 uint64
	var x171 uint64
	x171, x170 = bits.Mul64(x156, 0xffffffffffffffff)
	var x172 uint64
	var x173 uint64
	x173, x172 = bits.Mul64(x156, 0xffffffffffffffff)
	var x174 uint64
	var x175 uint64
	x175, x174 = bits.Mul64(x156, 0xffffffffffffffff)
	var x176 uint64
	var x177 uint64
	x177, x176 = bits.Mul64(x156, 0xfffffffeffffffff)
	var x178 uint64
	var x179 uint64
	x179, x178 = bits.Mul64(x156, 0xffffffffffffffff)
	var x180 uint64
	var x181 uint64
	x181, x180 = bits.Mul64(x156, 0xffffffffffffffff)
	var x182 uint64
	var x183 uint64
	x183, x182 = bits.Mul64(x156, 0xffffffffffffffff)
	var x184 uint64
	var x185 uint64
	x184, x185 = bits.Add64(x183, x180, uint64(0x0))
	var x186 uint64
	var x187 uint64
	x186, x187 = bits.Add64(x181, x178, uint64(uint1(x185)))
	var x188 uint64
	var x189 uint64
	x188, x189 = bits.Add64(x179, x176, uint64(uint1(x187)))
	var x190 uint64
	var x191 uint64
	x190, x191 = bits.Add64(x177, x174, uint64(uint1(x189)))
	var x192 uint64
	var x193 uint64
	x192, x193 = bits.Add64(x175, x172, uint64(uint1(x191)))
	var x194 uint64
	var x195 uint64
	x194, x195 = bits.Add64(x173, x170, uint64(uint1(x193)))
	var x197 uint64
	_, x197 = bits.Add64(x156, x182, uint64(0x0))
	var x198 uint64
	var x199 uint64
	x198, x199 = bits.Add64(x158, x184, uint64(uint1(x197)))
	var x200 uint64
	var x201 uint64
	x200, x201 = bits.Add64(x160, x186, uint64(uint1(x199)))
	var x202 uint64
	var x203 uint64
	x202, x203 = bits.Add64(x162, x188, uint64(uint1(x201)))
	var x204 uint64
	var x205 uint64
	x204, x205 = bits.Add64(x164, x190, uint64(uint1(x203)))
	var x206 uint64
	var x207 uint64
	x206, x207 = bits.Add64(x166, x192, uint64(uint1(x205)))
	var x208 uint64
	var x209 uint64
	x208, x209 = bits.Add64(x168, x194, uint64(uint1(x207)))
	var x210 uint64
	var x211 uint64
	x210, x211 = bits.Add64((uint64(uint1(x169)) + uint64(uint1(x155))), (uint64(uint1(x195)) + x171), uint64(uint1(x209)))
	var x212 uint64
	var x213 uint64
	x212, x213 = bits.Add64(x198, arg1[4], uint64(0x0))
	var x214 uint64
	var x215 uint64
	x214, x215 = bits.Add64(x200, uint64(0x0), uint64(uint1(x213)))
	var x216 uint64
	var x217 uint64
	x216, x217 = bits.Add64(x202, uint64(0x0), uint64(uint1(x215)))
	var x218 uint64
	var x219 uint64
	x218, x219 = bits.Add64(x204, uint64(0x0), uint64(uint1(x217)))
	var x220 uint64
	var x221 uint64
	x220, x221 = bits.Add64(x206, uint64(0x0), uint64(uint1(x219)))
	var x222 uint64
	var x223 uint64
	x222, x223 = bits.Add64(x208, uint64(0x0), uint64(uint1(x221)))
	var x224 uint64
	var x225 uint64
	x224, x225 = bits.Add64(x210, uint64(0x0), uint64(uint1(x223)))
	var x226 uint64
	var x227 uint64
	x227, x226 = bits.Mul64(x212, 0xffffffffffffffff)
	var x228 uint64
	var x229 uint64
	x229, x228 = bits.Mul64(x212, 0xffffffffffffffff)
	var x230 uint64
	var x231 uint64
	x231, x230 = bits.Mul64(x212, 0xffffffffffffffff)
	var x232 uint64
	var x233 uint64
	x233, x232 = bits.Mul64(x212, 0xfffffffeffffffff)
	var x234 uint64
	var x235 uint64
	x235, x234 = bits.Mul64(x212, 0xffffffffffffffff)
	var x236 uint64
	var x237 uint64
	x237, x236 = bits.Mul64(x212, 0xffffffffffffffff)
	var x238 uint64
	var x239 uint64
	x239, x238 = bits.Mul64(x212, 0xffffffffffffffff)
	var x240 uint64
	var x241 uint64
	x240, x241 = bits.Add64(x239, x236, uint64(0x0))
	var x242 uint64
	var x243 uint64
	x242, x243 = bits.Add64(x237, x234, uint64(uint1(x241)))
	var x244 uint64
	var x245 uint64
	x244, x245 = bits.Add64(x235, x232, uint64(uint1(x243)))
	var x246 uint64
	var x247 uint64
	x246, x247 = bits.Add64(x233, x230, uint64(uint1(x245)))
	var x248 uint64
	var x249 uint64
	x248, x249 = bits.Add64(x231, x228, uint64(uint1(x247)))
	var x250 uint64
	var x251 uint64
	x250, x251 = bits.Add64(x229, x226, uint64(uint1(x249)))
	var x253 uint64
	_, x253 = bits.Add64(x212, x238, uint64(0x0))
	var x254 uint64
	var x255 uint64
	x254, x255 = bits.Add64(x214, x240, uint64(uint1(x253)))
	var x256 uint64
	var x257 uint64
	x256, x257 = bits.Add64(x216, x242, uint64(uint1(x255)))
	var x258 uint64
	var x259 uint64
	x258, x259 = bits.Add64(x218, x244, uint64(uint1(x257)))
	var x260 uint64
	var x261 uint64
	x260, x261 = bits.Add64(x220, x246, uint64(uint1(x259)))
	var x262 uint64
	var x263 uint64
	x262, x263 = bits.Add64(x222, x248, uint64(uint1(x261)))
	var x264 uint64
	var x265 uint64
	x264, x265 = bits.Add64(x224, x250, uint64(uint1(x263)))
	var x266 uint64
	var x267 uint64
	x266, x267 = bits.Add64((uint64(uint1(x225)) + uint64(uint1(x211))), (uint64(uint1(x251)) + x227), uint64(uint1(x265)))
	var x268 uint64
	var x269 uint64
	x268, x269 = bits.Add64(x254, arg1[5], uint64(0x0))
	var x270 uint64
	var x271 uint64
	x270, x271 = bits.Add64(x256, uint64(0x0), uint64(uint1(x269)))
	var x272 uint64
	var x273 uint64
	x272, x273 = bits.Add64(x258, uint64(0x0), uint64(uint1(x271)))
	var x274 uint64
	var x275 uint64
	x274, x275 = bits.Add64(x260, uint64(0x0), uint64(uint1(x273)))
	var x276 uint64
	var x277 uint64
	x276, x277 = bits.Add64(x262, uint64(0x0), uint64(uint1(x275)))
	var x278 uint64
	var x279 uint64
	x278, x279 = bits.Add64(x264, uint64(0x0), uint64(uint1(x277)))
	var x280 uint64
	var x281 uint64
	x280, x281 = bits.Add64(x266, uint64(0x0), uint64(uint1(x279)))
	var x282 uint64
	var x283 uint64
	x283, x282 = bits.Mul64(x268, 0xffffffffffffffff)
	var x284 uint64
	var x285 uint64
	x285, x284 = bits.Mul64(x268, 0xffffffffffffffff)
	var x286 uint64
	var x287 uint64
	x287, x286 = bits.Mul64(x268, 0xffffffffffffffff)
	var x288 uint64
	var x289 uint64
	x289, x288 = bits.Mul64(x268, 0xfffffffeffffffff)
	var x290 uint64
	var x291 uint64
	x291, x290 = bits.Mul64(x268, 0xffffffffffffffff)
	var x292 uint64
	var x293 uint64
	x293, x292 = bits.Mul64(x268, 0xffffffffffffffff)
	var x294 uint64
	var x295 uint64
	x295, x294 = bits.Mul64(x268, 0xffffffffffffffff)
	var x296 uint64
	var x297 uint64
	x296, x297 = bits.Add64(x295, x292, uint64(0x0))
	var x298 uint64
	var x299 uint64
	x298, x299 = bits.Add64(x293, x290, uint64(uint1(x297)))
	var x300 uint64
	var x301 uint64
	x300, x301 = bits.Add64(x291, x288, uint64(uint1(x299)))
	var x302 uint64
	var x303 uint64
	x302, x303 = bits.Add64(x289, x286, uint64(uint1(x301)))
	var x304 uint64
	var x305 uint64
	x304, x305 = bits.Add64(x287, x284, uint64(uint1(x303)))
	var x306 uint64
	var x307 uint64
	x306, x307 = bits.Add64(x285, x282, uint64(uint1(x305)))
	var x309 uint64
	_, x309 = bits.Add64(x268, x294, uint64(0x0))
	var x310 uint64
	var x311 uint64
	x310, x311 = bits.Add64(x270, x296, uint64(uint1(x309)))
	var x312 uint64
	var x313 uint64
	x312, x313 = bits.Add64(x272, x298, uint64(uint1(x311)))
	var x314 uint64
	var x315 uint64
	x314, x315 = bits.Add64(x274, x300, uint64(uint1(x313)))
	var x316 uint64
	var x317 uint64
	x316, x317 = bits.Add64(x276, x302, uint64(uint1(x315)))
	var x318 uint64
	var x319 uint64
	x318, x319 = bits.Add64(x278, x304, uint64(uint1(x317)))
	var x320 uint64
	var x321 uint64
	x320, x321 = bits.Add64(x280, x306, uint64(uint1(x319)))
	var x322 uint64
	var x323 uint64
	x322, x323 = bits.Add64((uint64(uint1(x281)) + uint64(uint1(x267))), (uint64(uint1(x307)) + x283), uint64(uint1(x321)))
	var x324 uint64
	var x325 uint64
	x324, x325 = bits.Add64(x310, arg1[6], uint64(0x0))
	var x326 uint64
	var x327 uint64
	x326, x327 = bits.Add64(x312, uint64(0x0), uint64(uint1(x325)))
	var x328 uint64
	var x329 uint64
	x328, x329 = bits.Add64(x314, uint64(0x0), uint64(uint1(x327)))
	var x330 uint64
	var x331 uint64
	x330, x331 = bits.Add64(x316, uint64(0x0), uint64(uint1(x329)))
	var x332 uint64
	var x333 uint64
	x332, x333 = bits.Add64(x318, uint64(0x0), uint64(uint1(x331)))
	var x334 uint64
	var x335 uint64
	x334, x335 = bits.Add64(x320, uint64(0x0), uint64(uint1(x333)))
	var x336 uint64
	var x337 uint64
	x336, x337 = bits.Add64(x322, uint64(0x0), uint64(uint1(x335)))
	var x338 uint64
	var x339 uint64
	x339, x338 = bits.Mul64(x324, 0xffffffffffffffff)
	var x340 uint64
	var x341 uint64
	x341, x340 = bits.Mul64(x324, 0xffffffffffffffff)
	var x342 uint64
	var x343 uint64
	x343, x342 = bits.Mul64(x324, 0xffffffffffffffff)
	var x344 uint64
	var x345 uint64
	x345, x344 = bits.Mul64(x324, 0xfffffffeffffffff)
	var x346 uint64
	var x347 uint64
	x347, x346 = bits.Mul64(x324, 0xffffffffffffffff)
	var x348 uint64
	var x349 uint64
	x349, x348 = bits.Mul64(x324, 0xffffffffffffffff)
	var x350 uint64
	var x351 uint64
	x351, x350 = bits.Mul64(x324, 0xffffffffffffffff)
	var x352 uint64
	var x353 uint64
	x352, x353 = bits.Add64(x351, x348, uint64(0x0))
	var x354 uint64
	var x355 uint64
	x354, x355 = bits.Add64(x349, x346, uint64(uint1(x353)))
	var x356 uint64
	var x357 uint64
	x356, x357 = bits.Add64(x347, x344, uint64(uint1(x355)))
	var x358 uint64
	var x359 uint64
	x358, x359 = bits.Add64(x345, x342, uint64(uint1(x357)))
	var x360 uint64
	var x361 uint64
	x360, x361 = bits.Add64(x343, x340, uint64(uint1(x359)))
	var x362 uint64
	var x363 uint64
	x362, x363 = bits.Add64(x341, x338, uint64(uint1(x361)))
	var x365 uint64
	_, x365 = bits.Add64(x324, x350, uint64(0x0))
	var x366 uint64
	var x367 uint64
	x366, x367 = bits.Add64(x326, x352, uint64(uint1(x365)))
	var x368 uint64
	var x369 uint64
	x368, x369 = bits.Add64(x328, x354, uint64(uint1(x367)))
	var x370 uint64
	var x371 uint64
	x370, x371 = bits.Add64(x330, x356, uint64(uint1(x369)))
	var x372 uint64
	var x373 uint64
	x372, x373 = bits.Add64(x332, x358, uint64(uint1(x371)))
	var x374 uint64
	var x375 uint64
	x374, x375 = bits.Add64(x334, x360, uint64(uint1(x373)))
	var x376 uint64
	var x377 uint64
	x376, x377 = bits.Add64(x336, x362, uint64(uint1(x375)))
	var x378 uint64
	var x379 uint64
	x378, x379 = bits.Add64((uint64(uint1(x337)) + uint64(uint1(x323))), (uint64(uint1(x363)) + x339), uint64(uint1(x377)))
	var x380 uint64
	var x381 uint64
	x380, x381 = bits.Sub64(x366, 0xffffffffffffffff, uint64(0x0))
	var x382 uint64
	var x383 uint64
	x382, x383 = bits.Sub64(x368, 0xffffffffffffffff, uint64(uint1(x381)))
	var x384 uint64
	var x385 uint64
	x384, x385 = bits.Sub64(x370, 0xffffffffffffffff, uint64(uint1(x383)))
	var x386 uint64
	var x387 uint64
	x386, x387 = bits.Sub64(x372, 0xfffffffeffffffff, uint64(uint1(x385)))
	var x388 uint64
	var x389 uint64
	x388, x389 = bits.Sub64(x374, 0xffffffffffffffff, uint64(uint1(x387)))
	var x390 uint64
	var x391 uint64
	x390, x391 = bits.Sub64(x376, 0xffffffffffffffff, uint64(uint1(x389)))
	var x392 uint64
	var x393 uint64
	x392, x393 = bits.Sub64(x378, 0xffffffffffffffff, uint64(uint1(x391)))
	var x395 uint64
	_, x395 = bits.Sub64(uint64(uint1(x379)), uint64(0x0), uint64(uint1(x393)))
	var x396 uint64
	cmovznzU64(&x396, uint1(x395), x380, x366)
	var x397 uint64
	cmovznzU64(&x397, uint1(x395), x382, x368)
	var x398 uint64
	cmovznzU64(&x398, uint1(x395), x384, x370)
	var x399 uint64
	cmovznzU64(&x399, uint1(x395), x386, x372)
	var x400 uint64
	cmovznzU64(&x400, uint1(x395), x388, x374)
	var x401 uint64
	cmovznzU64(&x401, uint1(x395), x390, x376)
	var x402 uint64
	cmovznzU64(&x402, uint1(x395), x392, x378)
	out1[0] = x396
	out1[1] = x397
	out1[2] = x398
	out1[3] = x399
	out1[4] = x400
	out1[5] = x401
	out1[6] = x402
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint64
	var x9 uint64
	x9, x8 = bits.Mul64(x7, 0x300000000)
	var x10 uint64
	var x11 uint64
	x11, x10 = bits.Mul64(x7, 0x2)
	var x12 uint64
	var x13 uint64
	x13, x12 = bits.Mul64(x10, 0xffffffffffffffff)
	var x14 uint64
	var x15 uint64
	x15, x14 = bits.Mul64(x10, 0xffffffffffffffff)
	var x16 uint64
	var x17 uint64
	x17, x16 = bits.Mul64(x10, 0xffffffffffffffff)
	var x18 uint64
	var x19 uint64
	x19, x18 = bits.Mul64(x10, 0xfffffffeffffffff)
	var x20 uint64
	var x21 uint64
	x21, x20 = bits.Mul64(x10, 0xffffffffffffffff)
	var x22 uint64
	var x23 uint64
	x23, x22 = bits.Mul64(x10, 0xffffffffffffffff)
	var x24 uint64
	var x25 uint64
	x25, x24 = bits.Mul64(x10, 0xffffffffffffffff)
	var x26 uint64
	var x27 uint64
	x26, x27 = bits.Add64(x25, x22, uint64(0x0))
	var x28 uint64
	var x29 uint64
	x28, x29 = bits.Add64(x23, x20, uint64(uint1(x27)))
	var x30 uint64
	var x31 uint64
	x30, x31 = bits.Add64(x21, x18, uint64(uint1(x29)))
	var x32 uint64
	var x33 uint64
	x32, x33 = bits.Add64(x19, x16, uint64(uint1(x31)))
	var x34 uint64
	var x35 uint64
	x34, x35 = bits.Add64(x17, x14, uint64(uint1(x33)))
	var x36 uint64
	var x37 uint64
	x36, x37 = bits.Add64(x15, x12, uint64(uint1(x35)))
	var x39 uint64
	_, x39 = bits.Add64(x10, x24, uint64(0x0))
	var x40 uint64
	var x41 uint64
	x40, x41 = bits.Add64(uint64(uint1(x11)), x26, uint64(uint1(x39)))
	var x42 uint64
	var x43 uint64
	x42, x43 = bits.Add64(uint64(0x0), x28, uint64(uint1(x41)))
	var x44 uint64
	var x45 uint64
	x44, x45 = bits.Add64(x8, x30, uint64(uint1(x43)))
	var x46 uint64
	var x47 uint64
	x46, x47 = bits.Add64(x9, x32, uint64(uint1(x45)))
	var x48 uint64
	var x49 uint64
	x48, x49 = bits.Add64(uint64(0x0), x34, uint64(uint1(x47)))
	var x50 uint64
	var x51 uint64
	x50, x51 = bits.Add64(uint64(0x0), x36, uint64(uint1(x49)))
	var x52 uint64
	var x53 uint64
	x52, x53 = bits.Add64(uint64(0x0), (uint64(uint1(x37)) + x13), uint64(uint1(x51)))
	var x54 uint64
	var x55 uint64
	x55, x54 = bits.Mul64(x1, 0x300000000)
	var x56 uint64
	var x57 uint64
	x57, x56 = bits.Mul64(x1, 0x2)
	var x58 uint64
	var x59 uint64
	x58, x59 = bits.Add64(x40, x56, uint64(0x0))
	var x60 uint64
	var x61 uint64
	x60, x61 = bits.Add64(x42, uint64(uint1(x57)), uint64(uint1(x59)))
	var x62 uint64
	var x63 uint64
	x62, x63 = bits.Add64(x44, uint64(0x0), uint64(uint1(x61)))
	var x64 uint64
	var x65 uint64
	x64, x65 = bits.Add64(x46, x54, uint64(uint1(x63)))
	var x66 uint64
	var x67 uint64
	x66, x67 = bits.Add64(x48, x55, uint64(uint1(x65)))
	var x68 uint64
	var x69 uint64
	x68, x69 = bits.Add64(x50, uint64(0x0), uint64(uint1(x67)))
	var x70 uint64
	var x71 uint64
	x70, x71 = bits.Add64(x52, uint64(0x0), uint64(uint1(x69)))
	var x72 uint64
	var x73 uint64
	x73, x72 = bits.Mul64(x58, 0xffffffffffffffff)
	var x74 uint64
	var x75 uint64
	x75, x74 = bits.Mul64(x58, 0xffffffffffffffff)
	var x76 uint64
	var x77 uint64
	x77, x76 = bits.Mul64(x58, 0xffffffffffffffff)
	var x78 uint64
	var x79 uint64
	x79, x78 = bits.Mul64(x58, 0xfffffffeffffffff)
	var x80 uint64
	var x81 uint64
	x81, x80 = bits.Mul64(x58, 0xffffffffffffffff)
	var x82 uint64
	var x83 uint64
	x83, x82 = bits.Mul64(x58, 0xffffffffffffffff)
	var x84 uint64
	var x85 uint64
	x85, x84 = bits.Mul64(x58, 0xffffffffffffffff)
	var x86 uint64
	var x87 uint64
	x86, x87 = bits.Add64(x85, x82, uint64(0x0))
	var x88 uint64
	var x89 uint64
	x88, x89 = bits.Add64(x83, x80, uint64(uint1(x87)))
	var x90 uint64
	var x91 uint64
	x90, x91 = bits.Add64(x81, x78, uint64(uint1(x89)))
	var x92 uint64
	var x93 uint64
	x92, x93 = bits.Add64(x79, x76, uint64(uint1(x91)))
	var x94 uint64
	var x95 uint64
	x94, x95 = bits.Add64(x77, x74, uint64(uint1(x93)))
	var x96 uint64
	var x97 uint64
	x96, x97 = bits.Add64(x75, x72, uint64(uint1(x95)))
	var x99 uint64
	_, x99 = bits.Add64(x58, x84, uint64(0x0))
	var x100 uint64
	var x101 uint64
	x100, x101 = bits.Add64(x60, x86, uint64(uint1(x99)))
	var x102 uint64
	var x103 uint64
	x102, x103 = bits.Add64(x62, x88, uint64(uint1(x101)))
	var x104 uint64
	var x105 uint64
	x104, x105 = bits.Add64(x64, x90, uint64(uint1(x103)))
	var x106 uint64
	var x107 uint64
	x106, x107 = bits.Add64(x66, x92, uint64(uint1(x105)))
	var x108 uint64
	var x109 uint64
	x108, x109 = bits.Add64(x68, x94, uint64(uint1(x107)))
	var x110 uint64
	var x111 uint64
	x110, x111 = bits.Add64(x70, x96, uint64(uint1(x109)))
	var x112 uint64
	var x113 uint64
	x112, x113 = bits.Add64((uint64(uint1(x71)) + uint64(uint1(x53))), (uint64(uint1(x97)) + x73), uint64(uint1(x111)))
	var x114 uint64
	var x115 uint64
	x115, x114 = bits.Mul64(x2, 0x300000000)
	var x116 uint64
	var x117 uint64
	x117, x116 = bits.Mul64(x2, 0x2)
	var x118 uint64
	var x119 uint64
	x118, x119 = bits.Add64(x100, x116, uint64(0x0))
	var x120 uint64
	var x121 uint64
	x120, x121 = bits.Add64(x102, uint64(uint1(x117)), uint64(uint1(x119)))
	var x122 uint64
	var x123 uint64
	x122, x123 = bits.Add64(x104, uint64(0x0), uint64(uint1(x121)))
	var x124 uint64
	var x125 uint64
	x124, x125 = bits.Add64(x106, x114, uint64(uint1(x123)))
	var x126 uint64
	var x127 uint64
	x126, x127 = bits.Add64(x108, x115, uint64(uint1(x125)))
	var x128 uint64
	var x129 uint64
	x128, x129 = bits.Add64(x110, uint64(0x0), uint64(uint1(x127)))
	var x130 uint64
	var x131 uint64
	x130, x131 = bits.Add64(x112, uint64(0x0), uint64(uint1(x129)))
	var x132 uint64
	var x133 uint64
	x133, x132 = bits.Mul64(x118, 0xffffffffffffffff)
	var x134 uint64
	var x135 uint64
	x135, x134 = bits.Mul64(x118, 0xffffffffffffffff)
	var x136 uint64
	var x137 uint64
	x137, x136 = bits.Mul64(x118, 0xffffffffffffffff)
	var x138 uint64
	var x139 uint64
	x139, x138 = bits.Mul64(x118, 0xfffffffeffffffff)
	var x140 uint64
	var x141 uint64
	x141, x140 = bits.Mul64(x118, 0xffffffffffffffff)
	var x142 uint64
	var x143 uint64
	x143, x142 = bits.Mul64(x118, 0xffffffffffffffff)
	var x144 uint64
	var x145 uint64
	x145, x144 = bits.Mul64(x118, 0xffffffffffffffff)
	var x146 uint64
	var x147 uint64
	x146, x147 = bits.Add64(x145, x142, uint64(0x0))
	var x148 uint64
	var x149 uint64
	x148, x149 = bits.Add64(x143, x140, uint64(uint1(x147)))
	var x150 uint64
	var x151 uint64
	x150, x151 = bits.Add64(x141, x138, uint64(uint1(x149)))
	var x152 uint64
	var x153 uint64
	x152, x153 = bits.Add64(x139, x136, uint64(uint1(x151)))
	var x154 uint64
	var x155 uint64
	x154, x155 = bits.Add64(x137, x134, uint64(uint1(x153)))
	var x156 uint64
	var x157 uint64
	x156, x157 = bits.Add64(x135, x132, uint64(uint1(x155)))
	var x159 uint64
	_, x159 = bits.Add64(x118, x144, uint64(0x0))
	var x160 uint64
	var x161 uint64
	x160, x161 = bits.Add64(x120, x146, uint64(uint1(x159)))
	var x162 uint64
	var x163 uint64
	x162, x163 = bits.Add64(x122, x148, uint64(uint1(x161)))
	var x164 uint64
	var x165 uint64
	x164, x165 = bits.Add64(x124, x150, uint64(uint1(x163)))
	var x166 uint64
	var x167 uint64
	x166, x167 = bits.Add64(x126, x152, uint64(uint1(x165)))
	var x168 uint64
	var x169 uint64
	x168, x169 = bits.Add64(x128, x154, uint64(uint1(x167)))
	var x170 uint64
	var x171 uint64
	x170, x171 = bits.Add64(x130, x156, uint64(uint1(x169)))
	var x172 uint64
	var x173 uint64
	x172, x173 = bits.Add64((uint64(uint1(x131)) + uint64(uint1(x113))), (uint64(uint1(x157)) + x133), uint64(uint1(x171)))
	var x174 uint64
	var x175 uint64
	x175, x174 = bits.Mul64(x3, 0x300000000)
	var x176 uint64
	var x177 uint64
	x177, x176 = bits.Mul64(x3, 0x2)
	var x178 uint64
	var x179 uint64
	x178, x179 = bits.Add64(x160, x176, uint64(0x0))
	var x180 uint64
	var x181 uint64
	x180, x181 = bits.Add64(x162, uint64(uint1(x177)), uint64(uint1(x179)))
	var x182 uint64
	var x183 uint64
	x182, x183 = bits.Add64(x164, uint64(0x0), uint64(uint1(x181)))
	var x184 uint64
	var x185 uint64
	x184, x185 = bits.Add64(x166, x174, uint64(uint1(x183)))
	var x186 uint64
	var x187 uint64
	x186, x187 = bits.Add64(x168, x175, uint64(uint1(x185)))
	var x188 uint64
	var x189 uint64
	x188, x189 = bits.Add64(x170, uint64(0x0), uint64(uint1(x187)))
	var x190 uint64
	var x191 uint64
	x190, x191 = bits.Add64(x172, uint64(0x0), uint64(uint1(x189)))
	var x192 uint64
	var x193 uint64
	x193, x192 = bits.Mul64(x178, 0xffffffffffffffff)
	var x194 uint64
	var x195 uint64
	x195, x194 = bits.Mul64(x178, 0xffffffffffffffff)
	var x196 uint64
	var x197 uint64
	x197, x196 = bits.Mul64(x178, 0xffffffffffffffff)
	var x198 uint64
	var x199 uint64
	x199, x198 = bits.Mul64(x178, 0xfffffffeffffffff)
	var x200 uint64
	var x201 uint64
	x201, x200 = bits.Mul64(x178, 0xffffffffffffffff)
	var x202 uint64
	var x203 uint64
	x203, x202 = bits.Mul64(x178, 0xffffffffffffffff)
	var x204 uint64
	var x205 uint64
	x205, x204 = bits.Mul64(x178, 0xffffffffffffffff)
	var x206 uint64
	var x207 uint64
	x206, x207 = bits.Add64(x205, x202, uint64(0x0))
	var x208 uint64
	var x209 uint64
	x208, x209 = bits.Add64(x203, x200, uint64(uint1(x207)))
	var x210 uint64
	var x211 uint64
	x210, x211 = bits.Add64(x201, x198, uint64(uint1(x209)))
	var x212 uint64
	var x213 uint64
	x212, x213 = bits.Add64(x199, x196, uint64(uint1(x211)))
	var x214 uint64
	var x215 uint64
	x214, x215 = bits.Add64(x197, x194, uint64(uint1(x213)))
	var x216 uint64
	var x217 uint64
	x216, x217 = bits.Add64(x195, x192, uint64(uint1(x215)))
	var x219 uint64
	_, x219 = bits.Add64(x178, x204, uint64(0x0))
	var x220 uint64
	var x221 uint64
	x220, x221 = bits.Add64(x180, x206, uint64(uint1(x219)))
	var x222 uint64
	var x223 uint64
	x222, x223 = bits.Add64(x182, x208, uint64(uint1(x221)))
	var x224 uint64
	var x225 uint64
	x224, x225 = bits.Add64(x184, x210, uint64(uint1(x223)))
	var x226 uint64
	var x227 uint64
	x226, x227 = bits.Add64(x186, x212, uint64(uint1(x225)))
	var x228 uint64
	var x229 uint64
	x228, x229 = bits.Add64(x188, x214, uint64(uint1(x227)))
	var x230 uint64
	var x231 uint64
	x230, x231 = bits.Add64(x190, x216, uint64(uint1(x229)))
	var x232 uint64
	var x233 uint64
	x232, x233 = bits.Add64((uint64(uint1(x191)) + uint64(uint1(x173))), (uint64(uint1(x217)) + x193), uint64(uint1(x231)))
	var x234 uint64
	var x235 uint64
	x235, x234 = bits.Mul64(x4, 0x300000000)
	var x236 uint64
	var x237 uint64
	x237, x236 = bits.Mul64(x4, 0x2)
	var x238 uint64
	var x239 uint64
	x238, x239 = bits.Add64(x220, x236, uint64(0x0))
	var x240 uint64
	var x241 uint64
	x240, x241 = bits.Add64(x222, uint64(uint1(x237)), uint64(uint1(x239)))
	var x242 uint64
	var x243 uint64
	x242, x243 = bits.Add64(x224, uint64(0x0), uint64(uint1(x241)))
	var x244 uint64
	var x245 uint64
	x244, x245 = bits.Add64(x226, x234, uint64(uint1(x243)))
	var x246 uint64
	var x247 uint64
	x246, x247 = bits.Add64(x228, x235, uint64(uint1(x245)))
	var x248 uint64
	var x249 uint64
	x248, x249 = bits.Add64(x230, uint64(0x0), uint64(uint1(x247)))
	var x250 uint64
	var x251 uint64
	x250, x251 = bits.Add64(x232, uint64(0x0), uint64(uint1(x249)))
	var x252 uint64
	var x253 uint64
	x253, x252 = bits.Mul64(x238, 0xffffffffffffffff)
	var x254 uint64
	var x255 uint64
	x255, x254 = bits.Mul64(x238, 0xffffffffffffffff)
	var x256 uint64
	var x257 uint64
	x257, x256 = bits.Mul64(x238, 0xffffffffffffffff)
	var x258 uint64
	var x259 uint64
	x259, x258 = bits.Mul64(x238, 0xfffffffeffffffff)
	var x260 uint64
	var x261 uint64
	x261, x260 = bits.Mul64(x238, 0xffffffffffffffff)
	var x262 uint64
	var x263 uint64
	x263, x262 = bits.Mul64(x238, 0xffffffffffffffff)
	var x264 uint64
	var x265 uint64
	x265, x264 = bits.Mul64(x238, 0xffffffffffffffff)
	var x266 uint64
	var x267 uint64
	x266, x267 = bits.Add64(x265, x262, uint64(0x0))
	var x268 uint64
	var x269 uint64
	x268, x269 = bits.Add64(x263, x260, uint64(uint1(x267)))
	var x270 uint64
	var x271 uint64
	x270, x271 = bits.Add64(x261, x258, uint64(uint1(x269)))
	var x272 uint64
	var x273 uint64
	x272, x273 = bits.Add64(x259, x256, uint64(uint1(x271)))
	var x274 uint64
	var x275 uint64
	x274, x275 = bits.Add64(x257, x254, uint64(uint1(x273)))
	var x276 uint64
	var x277 uint64
	x276, x277 = bits.Add64(x255, x252, uint64(uint1(x275)))
	var x279 uint64
	_, x279 = bits.Add64(x238, x264, uint64(0x0))
	var x280 uint64
	var x281 uint64
	x280, x281 = bits.Add64(x240, x266, uint64(uint1(x279)))
	var x282 uint64
	var x283 uint64
	x282, x283 = bits.Add64(x242, x268, uint64(uint1(x281)))
	var x284 uint64
	var x285 uint64
	x284, x285 = bits.Add64(x244, x270, uint64(uint1(x283)))
	var x286 uint64
	var x287 uint64
	x286, x287 = bits.Add64(x246, x272, uint64(uint1(x285)))
	var x288 uint64
	var x289 uint64
	x288, x289 = bits.Add64(x248, x274, uint64(uint1(x287)))
	var x290 uint64
	var x291 uint64
	x290, x291 = bits.Add64(x250, x276, uint64(uint1(x289)))
	var x292 uint64
	var x293 uint64
	x292, x293 = bits.Add64((uint64(uint1(x251)) + uint64(uint1(x233))), (uint64(uint1(x277)) + x253), uint64(uint1(x291)))
	var x294 uint64
	var x295 uint64
	x295, x294 = bits.Mul64(x5, 0x300000000)
	var x296 uint64
	var x297 uint64
	x297, x296 = bits.Mul64(x5, 0x2)
	var x298 uint64
	var x299 uint64
	x298, x299 = bits.Add64(x280, x296, uint64(0x0))
	var x300 uint64
	var x301 uint64
	x300, x301 = bits.Add64(x282, uint64(uint1(x297)), uint64(uint1(x299)))
	var x302 uint64
	var x303 uint64
	x302, x303 = bits.Add64(x284, uint64(0x0), uint64(uint1(x301)))
	var x304 uint64
	var x305 uint64
	x304, x305 = bits.Add64(x286, x294, uint64(uint1(x303)))
	var x306 uint64
	var x307 uint64
	x306, x307 = bits.Add64(x288, x295, uint64(uint1(x305)))
	var x308 uint64
	var x309 uint64
	x308, x309 = bits.Add64(x290, uint64(0x0), uint64(uint1(x307)))
	var x310 uint64
	var x311 uint64
	x310, x311 = bits.Add64(x292, uint64(0x0), uint64(uint1(x309)))
	var x312 uint64
	var x313 uint64
	x313, x312 = bits.Mul64(x298, 0xffffffffffffffff)
	var x314 uint64
	var x315 uint64
	x315, x314 = bits.Mul64(x298, 0xffffffffffffffff)
	var x316 uint64
	var x317 uint64
	x317, x316 = bits.Mul64(x298, 0xffffffffffffffff)
	var x318 uint64
	var x319 uint64
	x319, x318 = bits.Mul64(x298, 0xfffffffeffffffff)
	var x320 uint64
	var x321 uint64
	x321, x320 = bits.Mul64(x298, 0xffffffffffffffff)
	var x322 uint64
	var x323 uint64
	x323, x322 = bits.Mul64(x298, 0xffffffffffffffff)
	var x324 uint64
	var x325 uint64
	x325, x324 = bits.Mul64(x298, 0xffffffffffffffff)
	var x326 uint64
	var x327 uint64
	x326, x327 = bits.Add64(x325, x322, uint64(0x0))
	var x328 uint64
	var x329 uint64
	x328, x329 = bits.Add64(x323, x320, uint64(uint1(x327)))
	var x330 uint64
	var x331 uint64
	x330, x331 = bits.Add64(x321, x318, uint64(uint1(x329)))
	var x332 uint64
	var x333 uint64
	x332, x333 = bits.Add64(x319, x316, uint64(uint1(x331)))
	var x334 uint64
	var x335 uint64
	x334, x335 = bits.Add64(x317, x314, uint64(uint1(x333)))
	var x336 uint64
	var x337 uint64
	x336, x337 = bits.Add64(x315, x312, uint64(uint1(x335)))
	var x339 uint64
	_, x339 = bits.Add64(x298, x324, uint64(0x0))
	var x340 uint64
	var x341 uint64
	x340, x341 = bits.Add64(x300, x326, uint64(uint1(x339)))
	var x342 uint64
	var x343 uint64
	x342, x343 = bits.Add64(x302, x328, uint64(uint1(x341)))
	var x344 uint64
	var x345 uint64
	x344, x345 = bits.Add64(x304, x330, uint64(uint1(x343)))
	var x346 uint64
	var x347 uint64
	x346, x347 = bits.Add64(x306, x332, uint64(uint1(x345)))
	var x348 uint64
	var x349 uint64
	x348, x349 = bits.Add64(x308, x334, uint64(uint1(x347)))
	var x350 uint64
	var x351 uint64
	x350, x351 = bits.Add64(x310, x336, uint64(uint1(x349)))
	var x352 uint64
	var x353 uint64
	x352, x353 = bits.Add64((uint64(uint1(x311)) + uint64(uint1(x293))), (uint64(uint1(x337)) + x313), uint64(uint1(x351)))
	var x354 uint64
	var x355 uint64
	x355, x354 = bits.Mul64(x6, 0x300000000)
	var x356 uint64
	var x357 uint64
	x357, x356 = bits.Mul64(x6, 0x2)
	var x358 uint64
	var x359 uint64
	x358, x359 = bits.Add64(x340, x356, uint64(0x0))
	var x360 uint64
	var x361 uint64
	x360, x361 = bits.Add64(x342, uint64(uint1(x357)), uint64(uint1(x359)))
	var x362 uint64
	var x363 uint64
	x362, x363 = bits.Add64(x344, uint64(0x0), uint64(uint1(x361)))
	var x364 uint64
	var x365 uint64
	x364, x365 = bits.Add64(x346, x354, uint64(uint1(x363)))
	var x366 uint64
	var x367 uint64
	x366, x367 = bits.Add64(x348, x355, uint64(uint1(x365)))
	var x368 uint64
	var x369 uint64
	x368, x369 = bits.Add64(x350, uint64(0x0), uint64(uint1(x367)))
	var x370 uint64
	var x371 uint64
	x370, x371 = bits.Add64(x352, uint64(0x0), uint64(uint1(x369)))
	var x372 uint64
	var x373 uint64
	x373, x372 = bits.Mul64(x358, 0xffffffffffffffff)
	var x374 uint64
	var x375 uint64
	x375, x374 = bits.Mul64(x358, 0xffffffffffffffff)
	var x376 uint64
	var x377 uint64
	x377, x376 = bits.Mul64(x358, 0xffffffffffffffff)
	var x378 uint64
	var x379 uint64
	x379, x378 = bits.Mul64(x358, 0xfffffffeffffffff)
	var x380 uint64
	var x381 uint64
	x381, x380 = bits.Mul64(x358, 0xffffffffffffffff)
	var x382 uint64
	var x383 uint64
	x383, x382 = bits.Mul64(x358, 0xffffffffffffffff)
	var x384 uint64
	var x385 uint64
	x385, x384 = bits.Mul64(x358, 0xffffffffffffffff)
	var x386 uint64
	var x387 uint64
	x386, x387 = bits.Add64(x385, x382, uint64(0x0))
	var x388 uint64
	var x389 uint64
	x388, x389 = bits.Add64(x383, x380, uint64(uint1(x387)))
	var x390 uint64
	var x391 uint64
	x390, x391 = bits.Add64(x381, x378, uint64(uint1(x389)))
	var x392 uint64
	var x393 uint64
	x392, x393 = bits.Add64(x379, x376, uint64(uint1(x391)))
	var x394 uint64
	var x395 uint64
	x394, x395 = bits.Add64(x377, x374, uint64(uint1(x393)))
	var x396 uint64
	var x397 uint64
	x396, x397 = bits.Add64(x375, x372, uint64(uint1(x395)))
	var x399 uint64
	_, x399 = bits.Add64(x358, x384, uint64(0x0))
	var x400 uint64
	var x401 uint64
	x400, x401 = bits.Add64(x360, x386, uint64(uint1(x399)))
	var x402 uint64
	var x403 uint64
	x402, x403 = bits.Add64(x362, x388, uint64(uint1(x401)))
	var x404 uint64
	var x405 uint64
	x404, x405 = bits.Add64(x364, x390, uint64(uint1(x403)))
	var x406 uint64
	var x407 uint64
	x406, x407 = bits.Add64(x366, x392, uint64(uint1(x405)))
	var x408 uint64
	var x409 uint64
	x408, x409 = bits.Add64(x368, x394, uint64(uint1(x407)))
	var x410 uint64
	var x411 uint64
	x410, x411 = bits.Add64(x370, x396, uint64(uint1(x409)))
	var x412 uint64
	var x413 uint64
	x412, x413 = bits.Add64((uint64(uint1(x371)) + uint64(uint1(x353))), (uint64(uint1(x397)) + x373), uint64(uint1(x411)))
	var x414 uint64
	var x415 uint64
	x414, x415 = bits.Sub64(x400, 0xffffffffffffffff, uint64(0x0))
	var x416 uint64
	var x417 uint64
	x416, x417 = bits.Sub64(x402, 0xffffffffffffffff, uint64(uint1(x415)))
	var x418 uint64
	var x419 uint64
	x418, x419 = bits.Sub64(x404, 0xffffffffffffffff, uint64(uint1(x417)))
	var x420 uint64
	var x421 uint64
	x420, x421 = bits.Sub64(x406, 0xfffffffeffffffff, uint64(uint1(x419)))
	var x422 uint64
	var x423 uint64
	x422, x423 = bits.Sub64(x408, 0xffffffffffffffff, uint64(uint1(x421)))
	var x424 uint64
	var x425 uint64
	x424, x425 = bits.Sub64(x410, 0xffffffffffffffff, uint64(uint1(x423)))
	var x426 uint64
	var x427 uint64
	x426, x427 = bits.Sub64(x412, 0xffffffffffffffff, uint64(uint1(x425)))
	var x429 uint64
	_, x429 = bits.Sub64(uint64(uint1(x413)), uint64(0x0), uint64(uint1(x427)))
	var x430 uint64
	cmovznzU64(&x430, uint1(x429), x414, x400)
	var x431 uint64
	cmovznzU64(&x431, uint1(x429), x416, x402)
	var x432 uint64
	cmovznzU64(&x432, uint1(x429), x418, x404)
	var x433 uint64
	cmovznzU64(&x433, uint1(x429), x420, x406)
	var x434 uint64
	cmovznzU64(&x434, uint1(x429), x422, x408)
	var x435 uint64
	cmovznzU64(&x435, uint1(x429), x424, x410)
	var x436 uint64
	cmovznzU64(&x436, uint1(x429), x426, x412)
	out1[0] = x430
	out1[1] = x431
	out1[2] = x432
	out1[3] = x433
	out1[4] = x434
	out1[5] = x435
	out1[6] = x436
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffffff]
func Nonzero(out1 *uint64, arg1 *[7]uint64) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | arg1[6]))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Selectznz(out1 *[7]uint64, arg1 uint1, arg2 *[7]uint64, arg3 *[7]uint64) {
	var x1 uint64
	cmovznzU64(&x1, arg1, arg2[0], arg3[0])
	var x2 uint64
	cmovznzU64(&x2, arg1, arg2[1], arg3[1])
	var x3 uint64
	cmovznzU64(&x3, arg1, arg2[2], arg3[2])
	var x4 uint64
	cmovznzU64(&x4, arg1, arg2[3], arg3[3])
	var x5 uint64
	cmovznzU64(&x5, arg1, arg2[4], arg3[4])
	var x6 uint64
	cmovznzU64(&x6, arg1, arg2[5], arg3[5])
	var x7 uint64
	cmovznzU64(&x7, arg1, arg2[6], arg3[6])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..55]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[56]uint8, arg1 *[7]uint64) {
	x1 := arg1[6]
	x2 := arg1[5]
	x3 := arg1[4]
	x4 := arg1[3]
	x5 := arg1[2]
	x6 := arg1[1]
	x7 := arg1[0]
	x8 := (uint8(x7) & 0xff)
	x9 := (x7 >> 8)
	x10 := (uint8(x9) & 0xff)
	x11 := (x9 >> 8)
	x12 := (uint8(x11) & 0xff)
	x13 := (x11 >> 8)
	x14 := (uint8(x13) & 0xff)
	x15 := (x13 >> 8)
	x16 := (uint8(x15) & 0xff)
	x17 := (x15 >> 8)
	x18 := (uint8(x17) & 0xff)
	x19 := (x17 >> 8)
	x20 := (uint8(x19) & 0xff)
	x21 := uint8((x19 >> 8))
	x22 := (uint8(x6) & 0xff)
	x23 := (x6 >> 8)
	x24 := (uint8(x23) & 0xff)
	x25 := (x23 >> 8)
	x26 := (uint8(x25) & 0xff)
	x27 := (x25 >> 8)
	x28 := (uint8(x27) & 0xff)
	x29 := (x27 >> 8)
	x30 := (uint8(x29) & 0xff)
	x31 := (x29 >> 8)
	x32 := (uint8(x31) & 0xff)
	x33 := (x31 >> 8)
	x34 := (uint8(x33) & 0xff)
	x35 := uint8((x33 >> 8))
	x36 := (uint8(x5) & 0xff)
	x37 := (x5 >> 8)
	x38 := (uint8(x37) & 0xff)
	x39 := (x37 >> 8)
	x40 := (uint8(x39) & 0xff)
	x41 := (x39 >> 8)
	x42 := (uint8(x41) & 0xff)
	x43 := (x41 >> 8)
	x44 := (uint8(x43) & 0xff)
	x45 := (x43 >> 8)
	x46 := (uint8(x45) & 0xff)
	x47 := (x45 >> 8)
	x48 := (uint8(x47) & 0xff)
	x49 := uint8((x47 >> 8))
	x50 := (uint8(x4) & 0xff)
	x51 := (x4 >> 8)
	x52 := (uint8(x51) & 0xff)
	x53 := (x51 >> 8)
	x54 := (uint8(x53) & 0xff)
	x55 := (x53 >> 8)
	x56 := (uint8(x55) & 0xff)
	x57 := (x55 >> 8)
	x58 := (uint8(x57) & 0xff)
	x59 := (x57 >> 8)
	x60 := (uint8(x59) & 0xff)
	x61 := (x59 >> 8)
	x62 := (uint8(x61) & 0xff)
	x63 := uint8((x61 >> 8))
	x64 := (uint8(x3) & 0xff)
	x65 := (x3 >> 8)
	x66 := (uint8(x65) & 0xff)
	x67 := (x65 >> 8)
	x68 := (uint8(x67) & 0xff)
	x69 := (x67 >> 8)
	x70 := (uint8(x69) & 0xff)
	x71 := (x69 >> 8)
	x72 := (uint8(x71) & 0xff)
	x73 := (x71 >> 8)
	x74 := (uint8(x73) & 0xff)
	x75 := (x73 >> 8)
	x76 := (uint8(x75) & 0xff)
	x77 := uint8((x75 >> 8))
	x78 := (uint8(x2) & 0xff)
	x79 := (x2 >> 8)
	x80 := (uint8(x79) & 0xff)
	x81 := (x79 >> 8)
	x82 := (uint8(x81) & 0xff)
	x83 := (x81 >> 8)
	x84 := (uint8(x83) & 0xff)
	x85 := (x83 >> 8)
	x86 := (uint8(x85) & 0xff)
	x87 := (x85 >> 8)
	x88 := (uint8(x87) & 0xff)
	x89 := (x87 >> 8)
	x90 := (uint8(x89) & 0xff)
	x91 := uint8((x89 >> 8))
	x92 := (uint8(x1) & 0xff)
	x93 := (x1 >> 8)
	x94 := (uint8(x93) & 0xff)
	x95 := (x93 >> 8)
	x96 := (uint8(x95) & 0xff)
	x97 := (x95 >> 8)
	x98 := (uint8(x97) & 0xff)
	x99 := (x97 >> 8)
	x100 := (uint8(x99) & 0xff)
	x101 := (x99 >> 8)
	x102 := (uint8(x101) & 0xff)
	x103 := (x101 >> 8)
	x104 := (uint8(x103) & 0xff)
	x105 := uint8((x103 >> 8))
	out1[0] = x8
	out1[1] = x10
	out1[2] = x12
	out1[3] = x14
	out1[4] = x16
	out1[5] = x18
	out1[6] = x20
	out1[7] = x21
	out1[8] = x22
	out1[9] = x24
	out1[10] = x26
	out1[11] = x28
	out1[12] = x30
	out1[13] = x32
	out1[14] = x34
	out1[15] = x35
	out1[16] = x36
	out1[17] = x38
	out1[18] = x40
	out1[19] = x42
	out1[20] = x44
	out1[21] = x46
	out1[22] = x48
	out1[23] = x49
	out1[24] = x50
	out1[25] = x52
	out1[26] = x54
	out1[27] = x56
	out1[28] = x58
	out1[29] = x60
	out1[30] = x62
	out1[31] = x63
	out1[32] = x64
	out1[33] = x66
	out1[34] = x68
	out1[35] = x70
	out1[36] = x72
	out1[37] = x74
	out1[38] = x76
	out1[39] = x77
	out1[40] = x78
	out1[41] = x80
	out1[42] = x82
	out1[43] = x84
	out1[44] = x86
	out1[45] = x88
	out1[46] = x90
	out1[47] = x91
	out1[48] = x92
	out1[49] = x94
	out1[50] = x96
	out1[51] = x98
	out1[52] = x100
	out1[53] = x102
	out1[54] = x104
	out1[55] = x105
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func FromBytes(out1 *[7]uint64, arg1 *[56]uint8) {
	x1 := (uint64(arg1[55]) << 56)
	x2 := (uint64(arg1[54]) << 48)
	x3 := (uint64(arg1[53]) << 40)
	x4 := (uint64(arg1[52]) << 32)
	x5 := (uint64(arg1[51]) << 24)
	x6 := (uint64(arg1[50]) << 16)
	x7 := (uint64(arg1[49]) << 8)
	x8 := arg1[48]
	x9 := (uint64(arg1[47]) << 56)
	x10 := (uint64(arg1[46]) << 48)
	x11 := (uint64(arg1[45]) << 40)
	x12 := (uint64(arg1[44]) << 32)
	x13 := (uint64(arg1[43]) << 24)
	x14 := (uint64(arg1[42]) << 16)
	x15 := (uint64(arg1[41]) << 8)
	x16 := arg1[40]
	x17 := (uint64(arg1[39]) << 56)
	x18 := (uint64(arg1[38]) << 48)
	x19 := (uint64(arg1[37]) << 40)
	x20 := (uint64(arg1[36]) << 32)
	x21 := (uint64(arg1[35]) << 24)
	x22 := (uint64(arg1[34]) << 16)
	x23 := (uint64(arg1[33]) << 8)
	x24 := arg1[32]
	x25 := (uint64(arg1[31]) << 56)
	x26 := (uint64(arg1[30]) << 48)
	x27 := (uint64(arg1[29]) << 40)
	x28 := (uint64(arg1[28]) << 32)
	x29 := (uint64(arg1[27]) << 24)
	x30 := (uint64(arg1[26]) << 16)
	x31 := (uint64(arg1[25]) << 8)
	x32 := arg1[24]
	x33 := (uint64(arg1[23]) << 56)
	x34 := (uint64(arg1[22]) << 48)
	x35 := (uint64(arg1[21]) << 40)
	x36 := (uint64(arg1[20]) << 32)
	x37 := (uint64(arg1[19]) << 24)
	x38 := (uint64(arg1[18]) << 16)
	x39 := (uint64(arg1[17]) << 8)
	x40 := arg1[16]
	x41 := (uint64(arg1[15]) << 56)
	x42 := (uint64(arg1[14]) << 48)
	x43 := (uint64(arg1[13]) << 40)
	x44 := (uint64(arg1[12]) << 32)
	x45 := (uint64(arg1[11]) << 24)
	x46 := (uint64(arg1[10]) << 16)
	x47 := (uint64(arg1[9]) << 8)
	x48 := arg1[8]
	x49 := (uint64(arg1[7]) << 56)
	x50 := (uint64(arg1[6]) << 48)
	x51 := (uint64(arg1[5]) << 40)
	x52 := (uint64(arg1[4]) << 32)
	x53 := (uint64(arg1[3]) << 24)
	x54 := (uint64(arg1[2]) << 16)
	x55 := (uint64(arg1[1]) << 8)
	x56 := arg1[0]
	x57 := (x55 + uint64(x56))
	x58 := (x54 + x57)
	x59 := (x53 + x58)
	x60 := (x52 + x59)
	x61 := (x51 + x60)
	x62 := (x50 + x61)
	x63 := (x49 + x62)
	x64 := (x47 + uint64(x48))
	x65 := (x46 + x64)
	x66 := (x45 + x65)
	x67 := (x44 + x66)
	x68 := (x43 + x67)
	x69 := (x42 + x68)
	x70 := (x41 + x69)
	x71 := (x39 + uint64(x40))
	x72 := (x38 + x71)
	x73 := (x37 + x72)
	x74 := (x36 + x73)
	x75 := (x35 + x74)
	x76 := (x34 + x75)
	x77 := (x33 + x76)
	x78 := (x31 + uint64(x32))
	x79 := (x30 + x78)
	x80 := (x29 + x79)
	x81 := (x28 + x80)
	x82 := (x27 + x81)
	x83 := (x26 + x82)
	x84 := (x25 + x83)
	x85 := (x23 + uint64(x24))
	x86 := (x22 + x85)
	x87 := (x21 + x86)
	x88 := (x20 + x87)
	x89 := (x19 + x88)
	x90 := (x18 + x89)
	x91 := (x17 + x90)
	x92 := (x15 + uint64(x16))
	x93 := (x14 + x92)
	x94 := (x13 + x93)
	x95 := (x12 + x94)
	x96 := (x11 + x95)
	x97 := (x10 + x96)
	x98 := (x9 + x97)
	x99 := (x7 + uint64(x8))
	x100 := (x6 + x99)
	x101 := (x5 + x100)
	x102 := (x4 + x101)
	x103 := (x3 + x102)
	x104 := (x2 + x103)
	x105 := (x1 + x104)
	out1[0] = x63
	out1[1] = x70
	out1[2] = x77
	out1[3] = x84
	out1[4] = x91
	out1[5] = x98
	out1[6] = x105
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = uint64(0x1)
	out1[1] = uint64(0x0)
	out1[2] = uint64(0x0)
	out1[3] = 0x100000000
	out1[4] = uint64(0x0)
	out1[5] = uint64(0x0)
	out1[6] = uint64(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
func Msat(out1 *[8]uint64) {
	out1[0] = 0xffffffffffffffff
	out1[1] = 0xffffffffffffffff
	out1[2] = 0xffffffffffffffff
	out1[3] = 0xfffffffeffffffff
	out1[4] = 0xffffffffffffffff
	out1[5] = 0xffffffffffffffff
	out1[6] = 0xffffffffffffffff
	out1[7] = uint64(0x0)
}